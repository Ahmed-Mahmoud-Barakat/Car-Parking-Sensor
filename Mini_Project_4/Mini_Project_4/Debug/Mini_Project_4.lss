
Mini_Project_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  000035aa  0000363e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800188  00800188  00003766  2**0
                  ALLOC
  3 .stab         00002a30  00000000  00000000  00003768  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fe4  00000000  00000000  00006198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000717c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000731c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000750e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009919  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000ac9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000be78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c038  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c32e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cc9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 1b 0f 	jmp	0x1e36	; 0x1e36 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ea       	ldi	r30, 0xAA	; 170
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 39       	cpi	r26, 0x9C	; 156
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 07 	call	0xe2e	; 0xe2e <main>
      8a:	0c 94 d3 1a 	jmp	0x35a6	; 0x35a6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 57 1a 	jmp	0x34ae	; 0x34ae <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e7       	ldi	r26, 0x7E	; 126
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 73 1a 	jmp	0x34e6	; 0x34e6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 63 1a 	jmp	0x34c6	; 0x34c6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7f 1a 	jmp	0x34fe	; 0x34fe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 63 1a 	jmp	0x34c6	; 0x34c6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7f 1a 	jmp	0x34fe	; 0x34fe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 57 1a 	jmp	0x34ae	; 0x34ae <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e7       	ldi	r24, 0x7E	; 126
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 73 1a 	jmp	0x34e6	; 0x34e6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5f 1a 	jmp	0x34be	; 0x34be <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e7       	ldi	r22, 0x7E	; 126
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 7b 1a 	jmp	0x34f6	; 0x34f6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 63 1a 	jmp	0x34c6	; 0x34c6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7f 1a 	jmp	0x34fe	; 0x34fe <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 63 1a 	jmp	0x34c6	; 0x34c6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 7f 1a 	jmp	0x34fe	; 0x34fe <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 63 1a 	jmp	0x34c6	; 0x34c6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 7f 1a 	jmp	0x34fe	; 0x34fe <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 67 1a 	jmp	0x34ce	; 0x34ce <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 83 1a 	jmp	0x3506	; 0x3506 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 5f 1a 	jmp	0x34be	; 0x34be <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 7b 1a 	jmp	0x34f6	; 0x34f6 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ea 57       	subi	r30, 0x7A	; 122
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <main>:
#include "util/delay.h"

uint16 distance_ = 0;

int main(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	68 97       	sbiw	r28, 0x18	; 24
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7);
     e42:	af e5       	ldi	r26, 0x5F	; 95
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	ef e5       	ldi	r30, 0x5F	; 95
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	80 68       	ori	r24, 0x80	; 128
     e4e:	8c 93       	st	X, r24

	LCD_init();
     e50:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <LCD_init>

	Ultrasonic_init();
     e54:	0e 94 8e 09 	call	0x131c	; 0x131c <Ultrasonic_init>

	LEDS_init();
     e58:	0e 94 9c 08 	call	0x1138	; 0x1138 <LEDS_init>

	Buzzer_init();
     e5c:	0e 94 b9 0b 	call	0x1772	; 0x1772 <Buzzer_init>

	Ultrasonic_init();
     e60:	0e 94 8e 09 	call	0x131c	; 0x131c <Ultrasonic_init>

	while(1)
	{

		distance_ = Ultrasonic_readDistance();
     e64:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <Ultrasonic_readDistance>
     e68:	90 93 89 01 	sts	0x0189, r25
     e6c:	80 93 88 01 	sts	0x0188, r24
		LCD_moveCursor(0,0);
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	60 e0       	ldi	r22, 0x00	; 0
     e74:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_moveCursor>
		LCD_displayString("Distance=");
     e78:	80 e6       	ldi	r24, 0x60	; 96
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	0e 94 a6 19 	call	0x334c	; 0x334c <LCD_displayString>
		LCD_intgerToString(distance_);
     e80:	80 91 88 01 	lds	r24, 0x0188
     e84:	90 91 89 01 	lds	r25, 0x0189
     e88:	0e 94 2a 1a 	call	0x3454	; 0x3454 <LCD_intgerToString>
		LCD_displayString(" CM");
     e8c:	8a e6       	ldi	r24, 0x6A	; 106
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 a6 19 	call	0x334c	; 0x334c <LCD_displayString>
		if(distance_ > 20)
     e94:	80 91 88 01 	lds	r24, 0x0188
     e98:	90 91 89 01 	lds	r25, 0x0189
     e9c:	85 31       	cpi	r24, 0x15	; 21
     e9e:	91 05       	cpc	r25, r1
     ea0:	60 f0       	brcs	.+24     	; 0xeba <main+0x8c>
		{
			LED_off(LED_RED);
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_off>
			LED_off(LED_GREEN);
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_off>
			LED_off(LED_BLUE);
     eae:	82 e0       	ldi	r24, 0x02	; 2
     eb0:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_off>
			Buzzer_off();
     eb4:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <Buzzer_off>
     eb8:	d5 cf       	rjmp	.-86     	; 0xe64 <main+0x36>
		}
		else if(distance_ >=16 && distance_ <=20)
     eba:	80 91 88 01 	lds	r24, 0x0188
     ebe:	90 91 89 01 	lds	r25, 0x0189
     ec2:	80 31       	cpi	r24, 0x10	; 16
     ec4:	91 05       	cpc	r25, r1
     ec6:	98 f0       	brcs	.+38     	; 0xeee <main+0xc0>
     ec8:	80 91 88 01 	lds	r24, 0x0188
     ecc:	90 91 89 01 	lds	r25, 0x0189
     ed0:	85 31       	cpi	r24, 0x15	; 21
     ed2:	91 05       	cpc	r25, r1
     ed4:	60 f4       	brcc	.+24     	; 0xeee <main+0xc0>
		{
			LED_on(LED_RED);
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LED_on>
			LED_off(LED_GREEN);
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_off>
			LED_off(LED_BLUE);
     ee2:	82 e0       	ldi	r24, 0x02	; 2
     ee4:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_off>
			Buzzer_off();
     ee8:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <Buzzer_off>
     eec:	bb cf       	rjmp	.-138    	; 0xe64 <main+0x36>

		}
		else if(distance_ >=11 && distance_ <=15)
     eee:	80 91 88 01 	lds	r24, 0x0188
     ef2:	90 91 89 01 	lds	r25, 0x0189
     ef6:	8b 30       	cpi	r24, 0x0B	; 11
     ef8:	91 05       	cpc	r25, r1
     efa:	98 f0       	brcs	.+38     	; 0xf22 <main+0xf4>
     efc:	80 91 88 01 	lds	r24, 0x0188
     f00:	90 91 89 01 	lds	r25, 0x0189
     f04:	80 31       	cpi	r24, 0x10	; 16
     f06:	91 05       	cpc	r25, r1
     f08:	60 f4       	brcc	.+24     	; 0xf22 <main+0xf4>
		{
			LED_on(LED_RED);
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LED_on>
			LED_on(LED_GREEN);
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LED_on>
			LED_off(LED_BLUE);
     f16:	82 e0       	ldi	r24, 0x02	; 2
     f18:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_off>
			Buzzer_off();
     f1c:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <Buzzer_off>
     f20:	a1 cf       	rjmp	.-190    	; 0xe64 <main+0x36>
		}
		else if(distance_ >=6 && distance_ <=10)
     f22:	80 91 88 01 	lds	r24, 0x0188
     f26:	90 91 89 01 	lds	r25, 0x0189
     f2a:	86 30       	cpi	r24, 0x06	; 6
     f2c:	91 05       	cpc	r25, r1
     f2e:	50 f1       	brcs	.+84     	; 0xf84 <main+0x156>
     f30:	80 91 88 01 	lds	r24, 0x0188
     f34:	90 91 89 01 	lds	r25, 0x0189
     f38:	8b 30       	cpi	r24, 0x0B	; 11
     f3a:	91 05       	cpc	r25, r1
     f3c:	18 f5       	brcc	.+70     	; 0xf84 <main+0x156>
		{
			LED_on(LED_RED);
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LED_on>
			LED_on(LED_GREEN);
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LED_on>
			LED_on(LED_BLUE);
     f4a:	82 e0       	ldi	r24, 0x02	; 2
     f4c:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LED_on>
			Buzzer_off();
     f50:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <Buzzer_off>
			if(distance_ < 10)
     f54:	80 91 88 01 	lds	r24, 0x0188
     f58:	90 91 89 01 	lds	r25, 0x0189
     f5c:	8a 30       	cpi	r24, 0x0A	; 10
     f5e:	91 05       	cpc	r25, r1
     f60:	40 f4       	brcc	.+16     	; 0xf72 <main+0x144>
			{
				LCD_moveCursor(0,13);
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	6d e0       	ldi	r22, 0x0D	; 13
     f66:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_moveCursor>
				LCD_displayString(" ");
     f6a:	8e e6       	ldi	r24, 0x6E	; 110
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	0e 94 a6 19 	call	0x334c	; 0x334c <LCD_displayString>
			}
			LCD_moveCursor(1,6);
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	66 e0       	ldi	r22, 0x06	; 6
     f76:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_moveCursor>
			LCD_displayString("      ");
     f7a:	80 e7       	ldi	r24, 0x70	; 112
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	0e 94 a6 19 	call	0x334c	; 0x334c <LCD_displayString>
     f82:	70 cf       	rjmp	.-288    	; 0xe64 <main+0x36>

		}
		else if(distance_ <=5)
     f84:	80 91 88 01 	lds	r24, 0x0188
     f88:	90 91 89 01 	lds	r25, 0x0189
     f8c:	86 30       	cpi	r24, 0x06	; 6
     f8e:	91 05       	cpc	r25, r1
     f90:	08 f0       	brcs	.+2      	; 0xf94 <main+0x166>
     f92:	68 cf       	rjmp	.-304    	; 0xe64 <main+0x36>
		{
			LED_on(LED_RED);
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LED_on>
			LED_on(LED_GREEN);
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LED_on>
			LED_on(LED_BLUE);
     fa0:	82 e0       	ldi	r24, 0x02	; 2
     fa2:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LED_on>
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a8 ec       	ldi	r26, 0xC8	; 200
     fac:	b2 e4       	ldi	r27, 0x42	; 66
     fae:	8d 8b       	std	Y+21, r24	; 0x15
     fb0:	9e 8b       	std	Y+22, r25	; 0x16
     fb2:	af 8b       	std	Y+23, r26	; 0x17
     fb4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     fb6:	6d 89       	ldd	r22, Y+21	; 0x15
     fb8:	7e 89       	ldd	r23, Y+22	; 0x16
     fba:	8f 89       	ldd	r24, Y+23	; 0x17
     fbc:	98 8d       	ldd	r25, Y+24	; 0x18
     fbe:	2b ea       	ldi	r18, 0xAB	; 171
     fc0:	3a ea       	ldi	r19, 0xAA	; 170
     fc2:	4a ea       	ldi	r20, 0xAA	; 170
     fc4:	50 e4       	ldi	r21, 0x40	; 64
     fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	89 8b       	std	Y+17, r24	; 0x11
     fd0:	9a 8b       	std	Y+18, r25	; 0x12
     fd2:	ab 8b       	std	Y+19, r26	; 0x13
     fd4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     fd6:	69 89       	ldd	r22, Y+17	; 0x11
     fd8:	7a 89       	ldd	r23, Y+18	; 0x12
     fda:	8b 89       	ldd	r24, Y+19	; 0x13
     fdc:	9c 89       	ldd	r25, Y+20	; 0x14
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e8       	ldi	r20, 0x80	; 128
     fe4:	5f e3       	ldi	r21, 0x3F	; 63
     fe6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fea:	88 23       	and	r24, r24
     fec:	1c f4       	brge	.+6      	; 0xff4 <main+0x1c6>
		__ticks = 1;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	88 8b       	std	Y+16, r24	; 0x10
     ff2:	91 c0       	rjmp	.+290    	; 0x1116 <main+0x2e8>
	else if (__tmp > 255)
     ff4:	69 89       	ldd	r22, Y+17	; 0x11
     ff6:	7a 89       	ldd	r23, Y+18	; 0x12
     ff8:	8b 89       	ldd	r24, Y+19	; 0x13
     ffa:	9c 89       	ldd	r25, Y+20	; 0x14
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	4f e7       	ldi	r20, 0x7F	; 127
    1002:	53 e4       	ldi	r21, 0x43	; 67
    1004:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1008:	18 16       	cp	r1, r24
    100a:	0c f0       	brlt	.+2      	; 0x100e <main+0x1e0>
    100c:	7b c0       	rjmp	.+246    	; 0x1104 <main+0x2d6>
	{
		_delay_ms(__us / 1000.0);
    100e:	6d 89       	ldd	r22, Y+21	; 0x15
    1010:	7e 89       	ldd	r23, Y+22	; 0x16
    1012:	8f 89       	ldd	r24, Y+23	; 0x17
    1014:	98 8d       	ldd	r25, Y+24	; 0x18
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	4a e7       	ldi	r20, 0x7A	; 122
    101c:	54 e4       	ldi	r21, 0x44	; 68
    101e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1022:	dc 01       	movw	r26, r24
    1024:	cb 01       	movw	r24, r22
    1026:	8c 87       	std	Y+12, r24	; 0x0c
    1028:	9d 87       	std	Y+13, r25	; 0x0d
    102a:	ae 87       	std	Y+14, r26	; 0x0e
    102c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    102e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1030:	7d 85       	ldd	r23, Y+13	; 0x0d
    1032:	8e 85       	ldd	r24, Y+14	; 0x0e
    1034:	9f 85       	ldd	r25, Y+15	; 0x0f
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	4a e7       	ldi	r20, 0x7A	; 122
    103c:	55 e4       	ldi	r21, 0x45	; 69
    103e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	88 87       	std	Y+8, r24	; 0x08
    1048:	99 87       	std	Y+9, r25	; 0x09
    104a:	aa 87       	std	Y+10, r26	; 0x0a
    104c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    104e:	68 85       	ldd	r22, Y+8	; 0x08
    1050:	79 85       	ldd	r23, Y+9	; 0x09
    1052:	8a 85       	ldd	r24, Y+10	; 0x0a
    1054:	9b 85       	ldd	r25, Y+11	; 0x0b
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	40 e8       	ldi	r20, 0x80	; 128
    105c:	5f e3       	ldi	r21, 0x3F	; 63
    105e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1062:	88 23       	and	r24, r24
    1064:	2c f4       	brge	.+10     	; 0x1070 <main+0x242>
		__ticks = 1;
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	9f 83       	std	Y+7, r25	; 0x07
    106c:	8e 83       	std	Y+6, r24	; 0x06
    106e:	3f c0       	rjmp	.+126    	; 0x10ee <main+0x2c0>
	else if (__tmp > 65535)
    1070:	68 85       	ldd	r22, Y+8	; 0x08
    1072:	79 85       	ldd	r23, Y+9	; 0x09
    1074:	8a 85       	ldd	r24, Y+10	; 0x0a
    1076:	9b 85       	ldd	r25, Y+11	; 0x0b
    1078:	20 e0       	ldi	r18, 0x00	; 0
    107a:	3f ef       	ldi	r19, 0xFF	; 255
    107c:	4f e7       	ldi	r20, 0x7F	; 127
    107e:	57 e4       	ldi	r21, 0x47	; 71
    1080:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1084:	18 16       	cp	r1, r24
    1086:	4c f5       	brge	.+82     	; 0x10da <main+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1088:	6c 85       	ldd	r22, Y+12	; 0x0c
    108a:	7d 85       	ldd	r23, Y+13	; 0x0d
    108c:	8e 85       	ldd	r24, Y+14	; 0x0e
    108e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	40 e2       	ldi	r20, 0x20	; 32
    1096:	51 e4       	ldi	r21, 0x41	; 65
    1098:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	bc 01       	movw	r22, r24
    10a2:	cd 01       	movw	r24, r26
    10a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	9f 83       	std	Y+7, r25	; 0x07
    10ae:	8e 83       	std	Y+6, r24	; 0x06
    10b0:	0f c0       	rjmp	.+30     	; 0x10d0 <main+0x2a2>
    10b2:	80 e9       	ldi	r24, 0x90	; 144
    10b4:	91 e0       	ldi	r25, 0x01	; 1
    10b6:	9d 83       	std	Y+5, r25	; 0x05
    10b8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10ba:	8c 81       	ldd	r24, Y+4	; 0x04
    10bc:	9d 81       	ldd	r25, Y+5	; 0x05
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	f1 f7       	brne	.-4      	; 0x10be <main+0x290>
    10c2:	9d 83       	std	Y+5, r25	; 0x05
    10c4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c6:	8e 81       	ldd	r24, Y+6	; 0x06
    10c8:	9f 81       	ldd	r25, Y+7	; 0x07
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	9f 83       	std	Y+7, r25	; 0x07
    10ce:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d0:	8e 81       	ldd	r24, Y+6	; 0x06
    10d2:	9f 81       	ldd	r25, Y+7	; 0x07
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	69 f7       	brne	.-38     	; 0x10b2 <main+0x284>
    10d8:	24 c0       	rjmp	.+72     	; 0x1122 <main+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10da:	68 85       	ldd	r22, Y+8	; 0x08
    10dc:	79 85       	ldd	r23, Y+9	; 0x09
    10de:	8a 85       	ldd	r24, Y+10	; 0x0a
    10e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    10e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	9f 83       	std	Y+7, r25	; 0x07
    10ec:	8e 83       	std	Y+6, r24	; 0x06
    10ee:	8e 81       	ldd	r24, Y+6	; 0x06
    10f0:	9f 81       	ldd	r25, Y+7	; 0x07
    10f2:	9b 83       	std	Y+3, r25	; 0x03
    10f4:	8a 83       	std	Y+2, r24	; 0x02
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	9b 81       	ldd	r25, Y+3	; 0x03
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	f1 f7       	brne	.-4      	; 0x10fa <main+0x2cc>
    10fe:	9b 83       	std	Y+3, r25	; 0x03
    1100:	8a 83       	std	Y+2, r24	; 0x02
    1102:	0f c0       	rjmp	.+30     	; 0x1122 <main+0x2f4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1104:	69 89       	ldd	r22, Y+17	; 0x11
    1106:	7a 89       	ldd	r23, Y+18	; 0x12
    1108:	8b 89       	ldd	r24, Y+19	; 0x13
    110a:	9c 89       	ldd	r25, Y+20	; 0x14
    110c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1110:	dc 01       	movw	r26, r24
    1112:	cb 01       	movw	r24, r22
    1114:	88 8b       	std	Y+16, r24	; 0x10
    1116:	88 89       	ldd	r24, Y+16	; 0x10
    1118:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	8a 95       	dec	r24
    111e:	f1 f7       	brne	.-4      	; 0x111c <main+0x2ee>
    1120:	89 83       	std	Y+1, r24	; 0x01
			_delay_us(100);
			Buzzer_on();
    1122:	0e 94 c5 0b 	call	0x178a	; 0x178a <Buzzer_on>
			LCD_moveCursor(1,6);
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	66 e0       	ldi	r22, 0x06	; 6
    112a:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_moveCursor>
			LCD_displayString("Stop !");
    112e:	87 e7       	ldi	r24, 0x77	; 119
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	0e 94 a6 19 	call	0x334c	; 0x334c <LCD_displayString>
    1136:	96 ce       	rjmp	.-724    	; 0xe64 <main+0x36>

00001138 <LEDS_init>:
} LED_ConfigType;

LED_ConfigType ledConfig[3];


void LEDS_init(void) {
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <LEDS_init+0x6>
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
	ledConfig[LED_RED].port = LED_PORT;
    1142:	82 e0       	ldi	r24, 0x02	; 2
    1144:	80 93 93 01 	sts	0x0193, r24
	ledConfig[LED_RED].pin = RED_LED_PIN;
    1148:	10 92 94 01 	sts	0x0194, r1
	ledConfig[LED_RED].logic = LOGIC;
    114c:	10 92 95 01 	sts	0x0195, r1

	ledConfig[LED_GREEN].port = LED_PORT;
    1150:	82 e0       	ldi	r24, 0x02	; 2
    1152:	80 93 96 01 	sts	0x0196, r24
	ledConfig[LED_GREEN].pin = GREEN_LED_PIN;
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	80 93 97 01 	sts	0x0197, r24
	ledConfig[LED_GREEN].logic = LOGIC;
    115c:	10 92 98 01 	sts	0x0198, r1

	ledConfig[LED_BLUE].port = LED_PORT;
    1160:	82 e0       	ldi	r24, 0x02	; 2
    1162:	80 93 99 01 	sts	0x0199, r24
	ledConfig[LED_BLUE].pin = BLUE_LED_PIN;
    1166:	82 e0       	ldi	r24, 0x02	; 2
    1168:	80 93 9a 01 	sts	0x019A, r24
	ledConfig[LED_BLUE].logic = LOGIC;
    116c:	10 92 9b 01 	sts	0x019B, r1

	for (int i = 0; i < 3; i++)
    1170:	1a 82       	std	Y+2, r1	; 0x02
    1172:	19 82       	std	Y+1, r1	; 0x01
    1174:	23 c0       	rjmp	.+70     	; 0x11bc <LEDS_init+0x84>
	{
		GPIO_setupPinDirection(ledConfig[i].port, ledConfig[i].pin, PIN_OUTPUT);
    1176:	29 81       	ldd	r18, Y+1	; 0x01
    1178:	3a 81       	ldd	r19, Y+2	; 0x02
    117a:	c9 01       	movw	r24, r18
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	82 0f       	add	r24, r18
    1182:	93 1f       	adc	r25, r19
    1184:	fc 01       	movw	r30, r24
    1186:	ed 56       	subi	r30, 0x6D	; 109
    1188:	fe 4f       	sbci	r31, 0xFE	; 254
    118a:	40 81       	ld	r20, Z
    118c:	29 81       	ldd	r18, Y+1	; 0x01
    118e:	3a 81       	ldd	r19, Y+2	; 0x02
    1190:	c9 01       	movw	r24, r18
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	82 0f       	add	r24, r18
    1198:	93 1f       	adc	r25, r19
    119a:	fc 01       	movw	r30, r24
    119c:	ec 56       	subi	r30, 0x6C	; 108
    119e:	fe 4f       	sbci	r31, 0xFE	; 254
    11a0:	90 81       	ld	r25, Z
    11a2:	84 2f       	mov	r24, r20
    11a4:	69 2f       	mov	r22, r25
    11a6:	41 e0       	ldi	r20, 0x01	; 1
    11a8:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <GPIO_setupPinDirection>
		LED_off(i);
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	0e 94 3b 09 	call	0x1276	; 0x1276 <LED_off>

	ledConfig[LED_BLUE].port = LED_PORT;
	ledConfig[LED_BLUE].pin = BLUE_LED_PIN;
	ledConfig[LED_BLUE].logic = LOGIC;

	for (int i = 0; i < 3; i++)
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	9a 81       	ldd	r25, Y+2	; 0x02
    11b6:	01 96       	adiw	r24, 0x01	; 1
    11b8:	9a 83       	std	Y+2, r25	; 0x02
    11ba:	89 83       	std	Y+1, r24	; 0x01
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	9a 81       	ldd	r25, Y+2	; 0x02
    11c0:	83 30       	cpi	r24, 0x03	; 3
    11c2:	91 05       	cpc	r25, r1
    11c4:	c4 f2       	brlt	.-80     	; 0x1176 <LEDS_init+0x3e>
	{
		GPIO_setupPinDirection(ledConfig[i].port, ledConfig[i].pin, PIN_OUTPUT);
		LED_off(i);
	}
}
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <LED_on>:

void LED_on(LED_ID id)
{
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	0f 92       	push	r0
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	89 83       	std	Y+1, r24	; 0x01
	if (ledConfig[id].logic == LOGIC)
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	c9 01       	movw	r24, r18
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	82 0f       	add	r24, r18
    11ea:	93 1f       	adc	r25, r19
    11ec:	fc 01       	movw	r30, r24
    11ee:	eb 56       	subi	r30, 0x6B	; 107
    11f0:	fe 4f       	sbci	r31, 0xFE	; 254
    11f2:	80 81       	ld	r24, Z
    11f4:	88 23       	and	r24, r24
    11f6:	f1 f4       	brne	.+60     	; 0x1234 <LED_on+0x64>
	{
		GPIO_writePin(ledConfig[id].port, ledConfig[id].pin, 1);
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	c9 01       	movw	r24, r18
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	82 0f       	add	r24, r18
    1206:	93 1f       	adc	r25, r19
    1208:	fc 01       	movw	r30, r24
    120a:	ed 56       	subi	r30, 0x6D	; 109
    120c:	fe 4f       	sbci	r31, 0xFE	; 254
    120e:	40 81       	ld	r20, Z
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	c9 01       	movw	r24, r18
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	82 0f       	add	r24, r18
    121e:	93 1f       	adc	r25, r19
    1220:	fc 01       	movw	r30, r24
    1222:	ec 56       	subi	r30, 0x6C	; 108
    1224:	fe 4f       	sbci	r31, 0xFE	; 254
    1226:	90 81       	ld	r25, Z
    1228:	84 2f       	mov	r24, r20
    122a:	69 2f       	mov	r22, r25
    122c:	41 e0       	ldi	r20, 0x01	; 1
    122e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
    1232:	1d c0       	rjmp	.+58     	; 0x126e <LED_on+0x9e>
	}
	else
	{
		GPIO_writePin(ledConfig[id].port, ledConfig[id].pin, 0);
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	c9 01       	movw	r24, r18
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	82 0f       	add	r24, r18
    1242:	93 1f       	adc	r25, r19
    1244:	fc 01       	movw	r30, r24
    1246:	ed 56       	subi	r30, 0x6D	; 109
    1248:	fe 4f       	sbci	r31, 0xFE	; 254
    124a:	40 81       	ld	r20, Z
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	c9 01       	movw	r24, r18
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	82 0f       	add	r24, r18
    125a:	93 1f       	adc	r25, r19
    125c:	fc 01       	movw	r30, r24
    125e:	ec 56       	subi	r30, 0x6C	; 108
    1260:	fe 4f       	sbci	r31, 0xFE	; 254
    1262:	90 81       	ld	r25, Z
    1264:	84 2f       	mov	r24, r20
    1266:	69 2f       	mov	r22, r25
    1268:	40 e0       	ldi	r20, 0x00	; 0
    126a:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
	}
}
    126e:	0f 90       	pop	r0
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <LED_off>:

void LED_off(LED_ID id)
{
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	0f 92       	push	r0
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	89 83       	std	Y+1, r24	; 0x01
	if (ledConfig[id].logic == LOGIC)
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	c9 01       	movw	r24, r18
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	82 0f       	add	r24, r18
    1290:	93 1f       	adc	r25, r19
    1292:	fc 01       	movw	r30, r24
    1294:	eb 56       	subi	r30, 0x6B	; 107
    1296:	fe 4f       	sbci	r31, 0xFE	; 254
    1298:	80 81       	ld	r24, Z
    129a:	88 23       	and	r24, r24
    129c:	f1 f4       	brne	.+60     	; 0x12da <LED_off+0x64>
	{
		GPIO_writePin(ledConfig[id].port, ledConfig[id].pin, LOGIC_LOW);
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	c9 01       	movw	r24, r18
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	82 0f       	add	r24, r18
    12ac:	93 1f       	adc	r25, r19
    12ae:	fc 01       	movw	r30, r24
    12b0:	ed 56       	subi	r30, 0x6D	; 109
    12b2:	fe 4f       	sbci	r31, 0xFE	; 254
    12b4:	40 81       	ld	r20, Z
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	c9 01       	movw	r24, r18
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	82 0f       	add	r24, r18
    12c4:	93 1f       	adc	r25, r19
    12c6:	fc 01       	movw	r30, r24
    12c8:	ec 56       	subi	r30, 0x6C	; 108
    12ca:	fe 4f       	sbci	r31, 0xFE	; 254
    12cc:	90 81       	ld	r25, Z
    12ce:	84 2f       	mov	r24, r20
    12d0:	69 2f       	mov	r22, r25
    12d2:	40 e0       	ldi	r20, 0x00	; 0
    12d4:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
    12d8:	1d c0       	rjmp	.+58     	; 0x1314 <LED_off+0x9e>
	}
	else
	{
		GPIO_writePin(ledConfig[id].port, ledConfig[id].pin, LOGIC_HIGH);
    12da:	89 81       	ldd	r24, Y+1	; 0x01
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	c9 01       	movw	r24, r18
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	82 0f       	add	r24, r18
    12e8:	93 1f       	adc	r25, r19
    12ea:	fc 01       	movw	r30, r24
    12ec:	ed 56       	subi	r30, 0x6D	; 109
    12ee:	fe 4f       	sbci	r31, 0xFE	; 254
    12f0:	40 81       	ld	r20, Z
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	c9 01       	movw	r24, r18
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	82 0f       	add	r24, r18
    1300:	93 1f       	adc	r25, r19
    1302:	fc 01       	movw	r30, r24
    1304:	ec 56       	subi	r30, 0x6C	; 108
    1306:	fe 4f       	sbci	r31, 0xFE	; 254
    1308:	90 81       	ld	r25, Z
    130a:	84 2f       	mov	r24, r20
    130c:	69 2f       	mov	r22, r25
    130e:	41 e0       	ldi	r20, 0x01	; 1
    1310:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
	}
}
    1314:	0f 90       	pop	r0
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <Ultrasonic_init>:
uint8 edgeCount = 0;
uint16 distance = 0;
ICU_ConfigType ICU_Configurations = {F_CPU_8,RAISING};

void Ultrasonic_init(void)
{
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62

	GPIO_setupPinDirection(ULTRA_PORT, TRIGGER_PIN, PIN_OUTPUT);
    1324:	83 e0       	ldi	r24, 0x03	; 3
    1326:	67 e0       	ldi	r22, 0x07	; 7
    1328:	41 e0       	ldi	r20, 0x01	; 1
    132a:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <GPIO_setupPinDirection>

	ICU_init(&ICU_Configurations);
    132e:	86 e8       	ldi	r24, 0x86	; 134
    1330:	91 e0       	ldi	r25, 0x01	; 1
    1332:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <ICU_init>

	ICU_setCallBack(Ultrasonic_edgeProcessing);
    1336:	8d e8       	ldi	r24, 0x8D	; 141
    1338:	9b e0       	ldi	r25, 0x0B	; 11
    133a:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <ICU_setCallBack>

}
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	08 95       	ret

00001344 <Ultrasonic_Trigger>:

void Ultrasonic_Trigger(void)
{
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	68 97       	sbiw	r28, 0x18	; 24
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	de bf       	out	0x3e, r29	; 62
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	cd bf       	out	0x3d, r28	; 61
	GPIO_writePin(ULTRA_PORT, TRIGGER_PIN, LOGIC_HIGH);
    1358:	83 e0       	ldi	r24, 0x03	; 3
    135a:	67 e0       	ldi	r22, 0x07	; 7
    135c:	41 e0       	ldi	r20, 0x01	; 1
    135e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	a0 e2       	ldi	r26, 0x20	; 32
    1368:	b1 e4       	ldi	r27, 0x41	; 65
    136a:	8d 8b       	std	Y+21, r24	; 0x15
    136c:	9e 8b       	std	Y+22, r25	; 0x16
    136e:	af 8b       	std	Y+23, r26	; 0x17
    1370:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1372:	6d 89       	ldd	r22, Y+21	; 0x15
    1374:	7e 89       	ldd	r23, Y+22	; 0x16
    1376:	8f 89       	ldd	r24, Y+23	; 0x17
    1378:	98 8d       	ldd	r25, Y+24	; 0x18
    137a:	2b ea       	ldi	r18, 0xAB	; 171
    137c:	3a ea       	ldi	r19, 0xAA	; 170
    137e:	4a ea       	ldi	r20, 0xAA	; 170
    1380:	50 e4       	ldi	r21, 0x40	; 64
    1382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1386:	dc 01       	movw	r26, r24
    1388:	cb 01       	movw	r24, r22
    138a:	89 8b       	std	Y+17, r24	; 0x11
    138c:	9a 8b       	std	Y+18, r25	; 0x12
    138e:	ab 8b       	std	Y+19, r26	; 0x13
    1390:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1392:	69 89       	ldd	r22, Y+17	; 0x11
    1394:	7a 89       	ldd	r23, Y+18	; 0x12
    1396:	8b 89       	ldd	r24, Y+19	; 0x13
    1398:	9c 89       	ldd	r25, Y+20	; 0x14
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	40 e8       	ldi	r20, 0x80	; 128
    13a0:	5f e3       	ldi	r21, 0x3F	; 63
    13a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13a6:	88 23       	and	r24, r24
    13a8:	1c f4       	brge	.+6      	; 0x13b0 <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	88 8b       	std	Y+16, r24	; 0x10
    13ae:	91 c0       	rjmp	.+290    	; 0x14d2 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    13b0:	69 89       	ldd	r22, Y+17	; 0x11
    13b2:	7a 89       	ldd	r23, Y+18	; 0x12
    13b4:	8b 89       	ldd	r24, Y+19	; 0x13
    13b6:	9c 89       	ldd	r25, Y+20	; 0x14
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	4f e7       	ldi	r20, 0x7F	; 127
    13be:	53 e4       	ldi	r21, 0x43	; 67
    13c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13c4:	18 16       	cp	r1, r24
    13c6:	0c f0       	brlt	.+2      	; 0x13ca <Ultrasonic_Trigger+0x86>
    13c8:	7b c0       	rjmp	.+246    	; 0x14c0 <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    13ca:	6d 89       	ldd	r22, Y+21	; 0x15
    13cc:	7e 89       	ldd	r23, Y+22	; 0x16
    13ce:	8f 89       	ldd	r24, Y+23	; 0x17
    13d0:	98 8d       	ldd	r25, Y+24	; 0x18
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	4a e7       	ldi	r20, 0x7A	; 122
    13d8:	54 e4       	ldi	r21, 0x44	; 68
    13da:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	8c 87       	std	Y+12, r24	; 0x0c
    13e4:	9d 87       	std	Y+13, r25	; 0x0d
    13e6:	ae 87       	std	Y+14, r26	; 0x0e
    13e8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ea:	6c 85       	ldd	r22, Y+12	; 0x0c
    13ec:	7d 85       	ldd	r23, Y+13	; 0x0d
    13ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    13f0:	9f 85       	ldd	r25, Y+15	; 0x0f
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	4a e7       	ldi	r20, 0x7A	; 122
    13f8:	55 e4       	ldi	r21, 0x45	; 69
    13fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	88 87       	std	Y+8, r24	; 0x08
    1404:	99 87       	std	Y+9, r25	; 0x09
    1406:	aa 87       	std	Y+10, r26	; 0x0a
    1408:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    140a:	68 85       	ldd	r22, Y+8	; 0x08
    140c:	79 85       	ldd	r23, Y+9	; 0x09
    140e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1410:	9b 85       	ldd	r25, Y+11	; 0x0b
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	40 e8       	ldi	r20, 0x80	; 128
    1418:	5f e3       	ldi	r21, 0x3F	; 63
    141a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    141e:	88 23       	and	r24, r24
    1420:	2c f4       	brge	.+10     	; 0x142c <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	9f 83       	std	Y+7, r25	; 0x07
    1428:	8e 83       	std	Y+6, r24	; 0x06
    142a:	3f c0       	rjmp	.+126    	; 0x14aa <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    142c:	68 85       	ldd	r22, Y+8	; 0x08
    142e:	79 85       	ldd	r23, Y+9	; 0x09
    1430:	8a 85       	ldd	r24, Y+10	; 0x0a
    1432:	9b 85       	ldd	r25, Y+11	; 0x0b
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	3f ef       	ldi	r19, 0xFF	; 255
    1438:	4f e7       	ldi	r20, 0x7F	; 127
    143a:	57 e4       	ldi	r21, 0x47	; 71
    143c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1440:	18 16       	cp	r1, r24
    1442:	4c f5       	brge	.+82     	; 0x1496 <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1444:	6c 85       	ldd	r22, Y+12	; 0x0c
    1446:	7d 85       	ldd	r23, Y+13	; 0x0d
    1448:	8e 85       	ldd	r24, Y+14	; 0x0e
    144a:	9f 85       	ldd	r25, Y+15	; 0x0f
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	40 e2       	ldi	r20, 0x20	; 32
    1452:	51 e4       	ldi	r21, 0x41	; 65
    1454:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	bc 01       	movw	r22, r24
    145e:	cd 01       	movw	r24, r26
    1460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1464:	dc 01       	movw	r26, r24
    1466:	cb 01       	movw	r24, r22
    1468:	9f 83       	std	Y+7, r25	; 0x07
    146a:	8e 83       	std	Y+6, r24	; 0x06
    146c:	0f c0       	rjmp	.+30     	; 0x148c <Ultrasonic_Trigger+0x148>
    146e:	80 e9       	ldi	r24, 0x90	; 144
    1470:	91 e0       	ldi	r25, 0x01	; 1
    1472:	9d 83       	std	Y+5, r25	; 0x05
    1474:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1476:	8c 81       	ldd	r24, Y+4	; 0x04
    1478:	9d 81       	ldd	r25, Y+5	; 0x05
    147a:	01 97       	sbiw	r24, 0x01	; 1
    147c:	f1 f7       	brne	.-4      	; 0x147a <Ultrasonic_Trigger+0x136>
    147e:	9d 83       	std	Y+5, r25	; 0x05
    1480:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1482:	8e 81       	ldd	r24, Y+6	; 0x06
    1484:	9f 81       	ldd	r25, Y+7	; 0x07
    1486:	01 97       	sbiw	r24, 0x01	; 1
    1488:	9f 83       	std	Y+7, r25	; 0x07
    148a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    148c:	8e 81       	ldd	r24, Y+6	; 0x06
    148e:	9f 81       	ldd	r25, Y+7	; 0x07
    1490:	00 97       	sbiw	r24, 0x00	; 0
    1492:	69 f7       	brne	.-38     	; 0x146e <Ultrasonic_Trigger+0x12a>
    1494:	24 c0       	rjmp	.+72     	; 0x14de <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1496:	68 85       	ldd	r22, Y+8	; 0x08
    1498:	79 85       	ldd	r23, Y+9	; 0x09
    149a:	8a 85       	ldd	r24, Y+10	; 0x0a
    149c:	9b 85       	ldd	r25, Y+11	; 0x0b
    149e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	9f 83       	std	Y+7, r25	; 0x07
    14a8:	8e 83       	std	Y+6, r24	; 0x06
    14aa:	8e 81       	ldd	r24, Y+6	; 0x06
    14ac:	9f 81       	ldd	r25, Y+7	; 0x07
    14ae:	9b 83       	std	Y+3, r25	; 0x03
    14b0:	8a 83       	std	Y+2, r24	; 0x02
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	9b 81       	ldd	r25, Y+3	; 0x03
    14b6:	01 97       	sbiw	r24, 0x01	; 1
    14b8:	f1 f7       	brne	.-4      	; 0x14b6 <Ultrasonic_Trigger+0x172>
    14ba:	9b 83       	std	Y+3, r25	; 0x03
    14bc:	8a 83       	std	Y+2, r24	; 0x02
    14be:	0f c0       	rjmp	.+30     	; 0x14de <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    14c0:	69 89       	ldd	r22, Y+17	; 0x11
    14c2:	7a 89       	ldd	r23, Y+18	; 0x12
    14c4:	8b 89       	ldd	r24, Y+19	; 0x13
    14c6:	9c 89       	ldd	r25, Y+20	; 0x14
    14c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	88 8b       	std	Y+16, r24	; 0x10
    14d2:	88 89       	ldd	r24, Y+16	; 0x10
    14d4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	8a 95       	dec	r24
    14da:	f1 f7       	brne	.-4      	; 0x14d8 <Ultrasonic_Trigger+0x194>
    14dc:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(10);

	GPIO_writePin(ULTRA_PORT, TRIGGER_PIN, LOGIC_LOW);
    14de:	83 e0       	ldi	r24, 0x03	; 3
    14e0:	67 e0       	ldi	r22, 0x07	; 7
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
}
    14e8:	68 96       	adiw	r28, 0x18	; 24
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	cd bf       	out	0x3d, r28	; 61
    14f4:	cf 91       	pop	r28
    14f6:	df 91       	pop	r29
    14f8:	08 95       	ret

000014fa <Ultrasonic_readDistance>:

uint16 Ultrasonic_readDistance(void)
{
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	68 97       	sbiw	r28, 0x18	; 24
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	f8 94       	cli
    1508:	de bf       	out	0x3e, r29	; 62
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	cd bf       	out	0x3d, r28	; 61

	Ultrasonic_Trigger();
    150e:	0e 94 a2 09 	call	0x1344	; 0x1344 <Ultrasonic_Trigger>
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	a0 e2       	ldi	r26, 0x20	; 32
    1518:	b1 e4       	ldi	r27, 0x41	; 65
    151a:	8d 8b       	std	Y+21, r24	; 0x15
    151c:	9e 8b       	std	Y+22, r25	; 0x16
    151e:	af 8b       	std	Y+23, r26	; 0x17
    1520:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1522:	6d 89       	ldd	r22, Y+21	; 0x15
    1524:	7e 89       	ldd	r23, Y+22	; 0x16
    1526:	8f 89       	ldd	r24, Y+23	; 0x17
    1528:	98 8d       	ldd	r25, Y+24	; 0x18
    152a:	2b ea       	ldi	r18, 0xAB	; 171
    152c:	3a ea       	ldi	r19, 0xAA	; 170
    152e:	4a ea       	ldi	r20, 0xAA	; 170
    1530:	50 e4       	ldi	r21, 0x40	; 64
    1532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	89 8b       	std	Y+17, r24	; 0x11
    153c:	9a 8b       	std	Y+18, r25	; 0x12
    153e:	ab 8b       	std	Y+19, r26	; 0x13
    1540:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1542:	69 89       	ldd	r22, Y+17	; 0x11
    1544:	7a 89       	ldd	r23, Y+18	; 0x12
    1546:	8b 89       	ldd	r24, Y+19	; 0x13
    1548:	9c 89       	ldd	r25, Y+20	; 0x14
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	40 e8       	ldi	r20, 0x80	; 128
    1550:	5f e3       	ldi	r21, 0x3F	; 63
    1552:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1556:	88 23       	and	r24, r24
    1558:	1c f4       	brge	.+6      	; 0x1560 <Ultrasonic_readDistance+0x66>
		__ticks = 1;
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	88 8b       	std	Y+16, r24	; 0x10
    155e:	91 c0       	rjmp	.+290    	; 0x1682 <Ultrasonic_readDistance+0x188>
	else if (__tmp > 255)
    1560:	69 89       	ldd	r22, Y+17	; 0x11
    1562:	7a 89       	ldd	r23, Y+18	; 0x12
    1564:	8b 89       	ldd	r24, Y+19	; 0x13
    1566:	9c 89       	ldd	r25, Y+20	; 0x14
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	4f e7       	ldi	r20, 0x7F	; 127
    156e:	53 e4       	ldi	r21, 0x43	; 67
    1570:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1574:	18 16       	cp	r1, r24
    1576:	0c f0       	brlt	.+2      	; 0x157a <Ultrasonic_readDistance+0x80>
    1578:	7b c0       	rjmp	.+246    	; 0x1670 <Ultrasonic_readDistance+0x176>
	{
		_delay_ms(__us / 1000.0);
    157a:	6d 89       	ldd	r22, Y+21	; 0x15
    157c:	7e 89       	ldd	r23, Y+22	; 0x16
    157e:	8f 89       	ldd	r24, Y+23	; 0x17
    1580:	98 8d       	ldd	r25, Y+24	; 0x18
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	4a e7       	ldi	r20, 0x7A	; 122
    1588:	54 e4       	ldi	r21, 0x44	; 68
    158a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	8c 87       	std	Y+12, r24	; 0x0c
    1594:	9d 87       	std	Y+13, r25	; 0x0d
    1596:	ae 87       	std	Y+14, r26	; 0x0e
    1598:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    159a:	6c 85       	ldd	r22, Y+12	; 0x0c
    159c:	7d 85       	ldd	r23, Y+13	; 0x0d
    159e:	8e 85       	ldd	r24, Y+14	; 0x0e
    15a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	4a e7       	ldi	r20, 0x7A	; 122
    15a8:	55 e4       	ldi	r21, 0x45	; 69
    15aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	88 87       	std	Y+8, r24	; 0x08
    15b4:	99 87       	std	Y+9, r25	; 0x09
    15b6:	aa 87       	std	Y+10, r26	; 0x0a
    15b8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    15ba:	68 85       	ldd	r22, Y+8	; 0x08
    15bc:	79 85       	ldd	r23, Y+9	; 0x09
    15be:	8a 85       	ldd	r24, Y+10	; 0x0a
    15c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	40 e8       	ldi	r20, 0x80	; 128
    15c8:	5f e3       	ldi	r21, 0x3F	; 63
    15ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15ce:	88 23       	and	r24, r24
    15d0:	2c f4       	brge	.+10     	; 0x15dc <Ultrasonic_readDistance+0xe2>
		__ticks = 1;
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	9f 83       	std	Y+7, r25	; 0x07
    15d8:	8e 83       	std	Y+6, r24	; 0x06
    15da:	3f c0       	rjmp	.+126    	; 0x165a <Ultrasonic_readDistance+0x160>
	else if (__tmp > 65535)
    15dc:	68 85       	ldd	r22, Y+8	; 0x08
    15de:	79 85       	ldd	r23, Y+9	; 0x09
    15e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    15e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	3f ef       	ldi	r19, 0xFF	; 255
    15e8:	4f e7       	ldi	r20, 0x7F	; 127
    15ea:	57 e4       	ldi	r21, 0x47	; 71
    15ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15f0:	18 16       	cp	r1, r24
    15f2:	4c f5       	brge	.+82     	; 0x1646 <Ultrasonic_readDistance+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f4:	6c 85       	ldd	r22, Y+12	; 0x0c
    15f6:	7d 85       	ldd	r23, Y+13	; 0x0d
    15f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    15fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	40 e2       	ldi	r20, 0x20	; 32
    1602:	51 e4       	ldi	r21, 0x41	; 65
    1604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	bc 01       	movw	r22, r24
    160e:	cd 01       	movw	r24, r26
    1610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	9f 83       	std	Y+7, r25	; 0x07
    161a:	8e 83       	std	Y+6, r24	; 0x06
    161c:	0f c0       	rjmp	.+30     	; 0x163c <Ultrasonic_readDistance+0x142>
    161e:	80 e9       	ldi	r24, 0x90	; 144
    1620:	91 e0       	ldi	r25, 0x01	; 1
    1622:	9d 83       	std	Y+5, r25	; 0x05
    1624:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1626:	8c 81       	ldd	r24, Y+4	; 0x04
    1628:	9d 81       	ldd	r25, Y+5	; 0x05
    162a:	01 97       	sbiw	r24, 0x01	; 1
    162c:	f1 f7       	brne	.-4      	; 0x162a <Ultrasonic_readDistance+0x130>
    162e:	9d 83       	std	Y+5, r25	; 0x05
    1630:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1632:	8e 81       	ldd	r24, Y+6	; 0x06
    1634:	9f 81       	ldd	r25, Y+7	; 0x07
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	9f 83       	std	Y+7, r25	; 0x07
    163a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    163c:	8e 81       	ldd	r24, Y+6	; 0x06
    163e:	9f 81       	ldd	r25, Y+7	; 0x07
    1640:	00 97       	sbiw	r24, 0x00	; 0
    1642:	69 f7       	brne	.-38     	; 0x161e <Ultrasonic_readDistance+0x124>
    1644:	24 c0       	rjmp	.+72     	; 0x168e <Ultrasonic_readDistance+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1646:	68 85       	ldd	r22, Y+8	; 0x08
    1648:	79 85       	ldd	r23, Y+9	; 0x09
    164a:	8a 85       	ldd	r24, Y+10	; 0x0a
    164c:	9b 85       	ldd	r25, Y+11	; 0x0b
    164e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	9f 83       	std	Y+7, r25	; 0x07
    1658:	8e 83       	std	Y+6, r24	; 0x06
    165a:	8e 81       	ldd	r24, Y+6	; 0x06
    165c:	9f 81       	ldd	r25, Y+7	; 0x07
    165e:	9b 83       	std	Y+3, r25	; 0x03
    1660:	8a 83       	std	Y+2, r24	; 0x02
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	9b 81       	ldd	r25, Y+3	; 0x03
    1666:	01 97       	sbiw	r24, 0x01	; 1
    1668:	f1 f7       	brne	.-4      	; 0x1666 <Ultrasonic_readDistance+0x16c>
    166a:	9b 83       	std	Y+3, r25	; 0x03
    166c:	8a 83       	std	Y+2, r24	; 0x02
    166e:	0f c0       	rjmp	.+30     	; 0x168e <Ultrasonic_readDistance+0x194>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1670:	69 89       	ldd	r22, Y+17	; 0x11
    1672:	7a 89       	ldd	r23, Y+18	; 0x12
    1674:	8b 89       	ldd	r24, Y+19	; 0x13
    1676:	9c 89       	ldd	r25, Y+20	; 0x14
    1678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	88 8b       	std	Y+16, r24	; 0x10
    1682:	88 89       	ldd	r24, Y+16	; 0x10
    1684:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	8a 95       	dec	r24
    168a:	f1 f7       	brne	.-4      	; 0x1688 <Ultrasonic_readDistance+0x18e>
    168c:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(10);

	timeHigh = ICU_getInputCaptureValue();
    168e:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <ICU_getInputCaptureValue>
    1692:	cc 01       	movw	r24, r24
    1694:	a0 e0       	ldi	r26, 0x00	; 0
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	80 93 8a 01 	sts	0x018A, r24
    169c:	90 93 8b 01 	sts	0x018B, r25
    16a0:	a0 93 8c 01 	sts	0x018C, r26
    16a4:	b0 93 8d 01 	sts	0x018D, r27

	distance = ((timeHigh * SOUND_SPEED_CM_PER_US)/4);
    16a8:	80 91 8a 01 	lds	r24, 0x018A
    16ac:	90 91 8b 01 	lds	r25, 0x018B
    16b0:	a0 91 8c 01 	lds	r26, 0x018C
    16b4:	b0 91 8d 01 	lds	r27, 0x018D
    16b8:	bc 01       	movw	r22, r24
    16ba:	cd 01       	movw	r24, r26
    16bc:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	bc 01       	movw	r22, r24
    16c6:	cd 01       	movw	r24, r26
    16c8:	29 e2       	ldi	r18, 0x29	; 41
    16ca:	3c e5       	ldi	r19, 0x5C	; 92
    16cc:	4f e0       	ldi	r20, 0x0F	; 15
    16ce:	5d e3       	ldi	r21, 0x3D	; 61
    16d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	bc 01       	movw	r22, r24
    16da:	cd 01       	movw	r24, r26
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	40 e8       	ldi	r20, 0x80	; 128
    16e2:	50 e4       	ldi	r21, 0x40	; 64
    16e4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	bc 01       	movw	r22, r24
    16ee:	cd 01       	movw	r24, r26
    16f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	90 93 90 01 	sts	0x0190, r25
    16fc:	80 93 8f 01 	sts	0x018F, r24

	return distance;
    1700:	80 91 8f 01 	lds	r24, 0x018F
    1704:	90 91 90 01 	lds	r25, 0x0190
}
    1708:	68 96       	adiw	r28, 0x18	; 24
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	cd bf       	out	0x3d, r28	; 61
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	08 95       	ret

0000171a <Ultrasonic_edgeProcessing>:

void Ultrasonic_edgeProcessing(void)
{
    171a:	df 93       	push	r29
    171c:	cf 93       	push	r28
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
	edgeCount++;
    1722:	80 91 8e 01 	lds	r24, 0x018E
    1726:	8f 5f       	subi	r24, 0xFF	; 255
    1728:	80 93 8e 01 	sts	0x018E, r24

	if (edgeCount == 1)
    172c:	80 91 8e 01 	lds	r24, 0x018E
    1730:	81 30       	cpi	r24, 0x01	; 1
    1732:	31 f4       	brne	.+12     	; 0x1740 <Ultrasonic_edgeProcessing+0x26>
	{
		ICU_clearTimerValue();
    1734:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <ICU_clearTimerValue>
		ICU_setEdgeDetectionType(FALLING);
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <ICU_setEdgeDetectionType>
    173e:	16 c0       	rjmp	.+44     	; 0x176c <Ultrasonic_edgeProcessing+0x52>
	}
	else if (edgeCount == 2)
    1740:	80 91 8e 01 	lds	r24, 0x018E
    1744:	82 30       	cpi	r24, 0x02	; 2
    1746:	91 f4       	brne	.+36     	; 0x176c <Ultrasonic_edgeProcessing+0x52>
	{
		timeHigh = ICU_getInputCaptureValue();
    1748:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <ICU_getInputCaptureValue>
    174c:	cc 01       	movw	r24, r24
    174e:	a0 e0       	ldi	r26, 0x00	; 0
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	80 93 8a 01 	sts	0x018A, r24
    1756:	90 93 8b 01 	sts	0x018B, r25
    175a:	a0 93 8c 01 	sts	0x018C, r26
    175e:	b0 93 8d 01 	sts	0x018D, r27

		ICU_setEdgeDetectionType(RAISING);
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <ICU_setEdgeDetectionType>

		edgeCount = 0;
    1768:	10 92 8e 01 	sts	0x018E, r1
	}
}
    176c:	cf 91       	pop	r28
    176e:	df 91       	pop	r29
    1770:	08 95       	ret

00001772 <Buzzer_init>:
#include"buzzer.h"
#include "gpio.h"

void Buzzer_init(void)
{
    1772:	df 93       	push	r29
    1774:	cf 93       	push	r28
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
    177a:	82 e0       	ldi	r24, 0x02	; 2
    177c:	65 e0       	ldi	r22, 0x05	; 5
    177e:	41 e0       	ldi	r20, 0x01	; 1
    1780:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <GPIO_setupPinDirection>
}
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <Buzzer_on>:

void Buzzer_on(void)
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
    1792:	82 e0       	ldi	r24, 0x02	; 2
    1794:	65 e0       	ldi	r22, 0x05	; 5
    1796:	41 e0       	ldi	r20, 0x01	; 1
    1798:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
}
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <Buzzer_off>:

void Buzzer_off(void)
{
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    17aa:	82 e0       	ldi	r24, 0x02	; 2
    17ac:	65 e0       	ldi	r22, 0x05	; 5
    17ae:	40 e0       	ldi	r20, 0x00	; 0
    17b0:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
}
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	00 d0       	rcall	.+0      	; 0x17c0 <GPIO_setupPinDirection+0x6>
    17c0:	00 d0       	rcall	.+0      	; 0x17c2 <GPIO_setupPinDirection+0x8>
    17c2:	0f 92       	push	r0
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	89 83       	std	Y+1, r24	; 0x01
    17ca:	6a 83       	std	Y+2, r22	; 0x02
    17cc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	88 30       	cpi	r24, 0x08	; 8
    17d2:	08 f0       	brcs	.+2      	; 0x17d6 <GPIO_setupPinDirection+0x1c>
    17d4:	d5 c0       	rjmp	.+426    	; 0x1980 <GPIO_setupPinDirection+0x1c6>
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	84 30       	cpi	r24, 0x04	; 4
    17da:	08 f0       	brcs	.+2      	; 0x17de <GPIO_setupPinDirection+0x24>
    17dc:	d1 c0       	rjmp	.+418    	; 0x1980 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	3d 83       	std	Y+5, r19	; 0x05
    17e6:	2c 83       	std	Y+4, r18	; 0x04
    17e8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ea:	9d 81       	ldd	r25, Y+5	; 0x05
    17ec:	81 30       	cpi	r24, 0x01	; 1
    17ee:	91 05       	cpc	r25, r1
    17f0:	09 f4       	brne	.+2      	; 0x17f4 <GPIO_setupPinDirection+0x3a>
    17f2:	43 c0       	rjmp	.+134    	; 0x187a <GPIO_setupPinDirection+0xc0>
    17f4:	2c 81       	ldd	r18, Y+4	; 0x04
    17f6:	3d 81       	ldd	r19, Y+5	; 0x05
    17f8:	22 30       	cpi	r18, 0x02	; 2
    17fa:	31 05       	cpc	r19, r1
    17fc:	2c f4       	brge	.+10     	; 0x1808 <GPIO_setupPinDirection+0x4e>
    17fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1800:	9d 81       	ldd	r25, Y+5	; 0x05
    1802:	00 97       	sbiw	r24, 0x00	; 0
    1804:	71 f0       	breq	.+28     	; 0x1822 <GPIO_setupPinDirection+0x68>
    1806:	bc c0       	rjmp	.+376    	; 0x1980 <GPIO_setupPinDirection+0x1c6>
    1808:	2c 81       	ldd	r18, Y+4	; 0x04
    180a:	3d 81       	ldd	r19, Y+5	; 0x05
    180c:	22 30       	cpi	r18, 0x02	; 2
    180e:	31 05       	cpc	r19, r1
    1810:	09 f4       	brne	.+2      	; 0x1814 <GPIO_setupPinDirection+0x5a>
    1812:	5f c0       	rjmp	.+190    	; 0x18d2 <GPIO_setupPinDirection+0x118>
    1814:	8c 81       	ldd	r24, Y+4	; 0x04
    1816:	9d 81       	ldd	r25, Y+5	; 0x05
    1818:	83 30       	cpi	r24, 0x03	; 3
    181a:	91 05       	cpc	r25, r1
    181c:	09 f4       	brne	.+2      	; 0x1820 <GPIO_setupPinDirection+0x66>
    181e:	85 c0       	rjmp	.+266    	; 0x192a <GPIO_setupPinDirection+0x170>
    1820:	af c0       	rjmp	.+350    	; 0x1980 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	81 30       	cpi	r24, 0x01	; 1
    1826:	a1 f4       	brne	.+40     	; 0x1850 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1828:	aa e3       	ldi	r26, 0x3A	; 58
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	ea e3       	ldi	r30, 0x3A	; 58
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	48 2f       	mov	r20, r24
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	02 2e       	mov	r0, r18
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <GPIO_setupPinDirection+0x8c>
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	0a 94       	dec	r0
    1848:	e2 f7       	brpl	.-8      	; 0x1842 <GPIO_setupPinDirection+0x88>
    184a:	84 2b       	or	r24, r20
    184c:	8c 93       	st	X, r24
    184e:	98 c0       	rjmp	.+304    	; 0x1980 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1850:	aa e3       	ldi	r26, 0x3A	; 58
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	ea e3       	ldi	r30, 0x3A	; 58
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	48 2f       	mov	r20, r24
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	02 2e       	mov	r0, r18
    1868:	02 c0       	rjmp	.+4      	; 0x186e <GPIO_setupPinDirection+0xb4>
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	0a 94       	dec	r0
    1870:	e2 f7       	brpl	.-8      	; 0x186a <GPIO_setupPinDirection+0xb0>
    1872:	80 95       	com	r24
    1874:	84 23       	and	r24, r20
    1876:	8c 93       	st	X, r24
    1878:	83 c0       	rjmp	.+262    	; 0x1980 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	81 30       	cpi	r24, 0x01	; 1
    187e:	a1 f4       	brne	.+40     	; 0x18a8 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1880:	a7 e3       	ldi	r26, 0x37	; 55
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e7 e3       	ldi	r30, 0x37	; 55
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	48 2f       	mov	r20, r24
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	02 2e       	mov	r0, r18
    1898:	02 c0       	rjmp	.+4      	; 0x189e <GPIO_setupPinDirection+0xe4>
    189a:	88 0f       	add	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	0a 94       	dec	r0
    18a0:	e2 f7       	brpl	.-8      	; 0x189a <GPIO_setupPinDirection+0xe0>
    18a2:	84 2b       	or	r24, r20
    18a4:	8c 93       	st	X, r24
    18a6:	6c c0       	rjmp	.+216    	; 0x1980 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    18a8:	a7 e3       	ldi	r26, 0x37	; 55
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	e7 e3       	ldi	r30, 0x37	; 55
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	48 2f       	mov	r20, r24
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	02 2e       	mov	r0, r18
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <GPIO_setupPinDirection+0x10c>
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	0a 94       	dec	r0
    18c8:	e2 f7       	brpl	.-8      	; 0x18c2 <GPIO_setupPinDirection+0x108>
    18ca:	80 95       	com	r24
    18cc:	84 23       	and	r24, r20
    18ce:	8c 93       	st	X, r24
    18d0:	57 c0       	rjmp	.+174    	; 0x1980 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	81 30       	cpi	r24, 0x01	; 1
    18d6:	a1 f4       	brne	.+40     	; 0x1900 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    18d8:	a4 e3       	ldi	r26, 0x34	; 52
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e4 e3       	ldi	r30, 0x34	; 52
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	48 2f       	mov	r20, r24
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	02 2e       	mov	r0, r18
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <GPIO_setupPinDirection+0x13c>
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	0a 94       	dec	r0
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <GPIO_setupPinDirection+0x138>
    18fa:	84 2b       	or	r24, r20
    18fc:	8c 93       	st	X, r24
    18fe:	40 c0       	rjmp	.+128    	; 0x1980 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1900:	a4 e3       	ldi	r26, 0x34	; 52
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	e4 e3       	ldi	r30, 0x34	; 52
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	48 2f       	mov	r20, r24
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	02 2e       	mov	r0, r18
    1918:	02 c0       	rjmp	.+4      	; 0x191e <GPIO_setupPinDirection+0x164>
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	0a 94       	dec	r0
    1920:	e2 f7       	brpl	.-8      	; 0x191a <GPIO_setupPinDirection+0x160>
    1922:	80 95       	com	r24
    1924:	84 23       	and	r24, r20
    1926:	8c 93       	st	X, r24
    1928:	2b c0       	rjmp	.+86     	; 0x1980 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	81 30       	cpi	r24, 0x01	; 1
    192e:	a1 f4       	brne	.+40     	; 0x1958 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1930:	a1 e3       	ldi	r26, 0x31	; 49
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	e1 e3       	ldi	r30, 0x31	; 49
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	48 2f       	mov	r20, r24
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	02 2e       	mov	r0, r18
    1948:	02 c0       	rjmp	.+4      	; 0x194e <GPIO_setupPinDirection+0x194>
    194a:	88 0f       	add	r24, r24
    194c:	99 1f       	adc	r25, r25
    194e:	0a 94       	dec	r0
    1950:	e2 f7       	brpl	.-8      	; 0x194a <GPIO_setupPinDirection+0x190>
    1952:	84 2b       	or	r24, r20
    1954:	8c 93       	st	X, r24
    1956:	14 c0       	rjmp	.+40     	; 0x1980 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1958:	a1 e3       	ldi	r26, 0x31	; 49
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e1 e3       	ldi	r30, 0x31	; 49
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	48 2f       	mov	r20, r24
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	02 2e       	mov	r0, r18
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <GPIO_setupPinDirection+0x1bc>
    1972:	88 0f       	add	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	0a 94       	dec	r0
    1978:	e2 f7       	brpl	.-8      	; 0x1972 <GPIO_setupPinDirection+0x1b8>
    197a:	80 95       	com	r24
    197c:	84 23       	and	r24, r20
    197e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	00 d0       	rcall	.+0      	; 0x1996 <GPIO_writePin+0x6>
    1996:	00 d0       	rcall	.+0      	; 0x1998 <GPIO_writePin+0x8>
    1998:	0f 92       	push	r0
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
    199e:	89 83       	std	Y+1, r24	; 0x01
    19a0:	6a 83       	std	Y+2, r22	; 0x02
    19a2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    19a4:	8a 81       	ldd	r24, Y+2	; 0x02
    19a6:	88 30       	cpi	r24, 0x08	; 8
    19a8:	08 f0       	brcs	.+2      	; 0x19ac <GPIO_writePin+0x1c>
    19aa:	d5 c0       	rjmp	.+426    	; 0x1b56 <GPIO_writePin+0x1c6>
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
    19ae:	84 30       	cpi	r24, 0x04	; 4
    19b0:	08 f0       	brcs	.+2      	; 0x19b4 <GPIO_writePin+0x24>
    19b2:	d1 c0       	rjmp	.+418    	; 0x1b56 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	3d 83       	std	Y+5, r19	; 0x05
    19bc:	2c 83       	std	Y+4, r18	; 0x04
    19be:	8c 81       	ldd	r24, Y+4	; 0x04
    19c0:	9d 81       	ldd	r25, Y+5	; 0x05
    19c2:	81 30       	cpi	r24, 0x01	; 1
    19c4:	91 05       	cpc	r25, r1
    19c6:	09 f4       	brne	.+2      	; 0x19ca <GPIO_writePin+0x3a>
    19c8:	43 c0       	rjmp	.+134    	; 0x1a50 <GPIO_writePin+0xc0>
    19ca:	2c 81       	ldd	r18, Y+4	; 0x04
    19cc:	3d 81       	ldd	r19, Y+5	; 0x05
    19ce:	22 30       	cpi	r18, 0x02	; 2
    19d0:	31 05       	cpc	r19, r1
    19d2:	2c f4       	brge	.+10     	; 0x19de <GPIO_writePin+0x4e>
    19d4:	8c 81       	ldd	r24, Y+4	; 0x04
    19d6:	9d 81       	ldd	r25, Y+5	; 0x05
    19d8:	00 97       	sbiw	r24, 0x00	; 0
    19da:	71 f0       	breq	.+28     	; 0x19f8 <GPIO_writePin+0x68>
    19dc:	bc c0       	rjmp	.+376    	; 0x1b56 <GPIO_writePin+0x1c6>
    19de:	2c 81       	ldd	r18, Y+4	; 0x04
    19e0:	3d 81       	ldd	r19, Y+5	; 0x05
    19e2:	22 30       	cpi	r18, 0x02	; 2
    19e4:	31 05       	cpc	r19, r1
    19e6:	09 f4       	brne	.+2      	; 0x19ea <GPIO_writePin+0x5a>
    19e8:	5f c0       	rjmp	.+190    	; 0x1aa8 <GPIO_writePin+0x118>
    19ea:	8c 81       	ldd	r24, Y+4	; 0x04
    19ec:	9d 81       	ldd	r25, Y+5	; 0x05
    19ee:	83 30       	cpi	r24, 0x03	; 3
    19f0:	91 05       	cpc	r25, r1
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <GPIO_writePin+0x66>
    19f4:	85 c0       	rjmp	.+266    	; 0x1b00 <GPIO_writePin+0x170>
    19f6:	af c0       	rjmp	.+350    	; 0x1b56 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	81 30       	cpi	r24, 0x01	; 1
    19fc:	a1 f4       	brne	.+40     	; 0x1a26 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    19fe:	ab e3       	ldi	r26, 0x3B	; 59
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	eb e3       	ldi	r30, 0x3B	; 59
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	48 2f       	mov	r20, r24
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	02 2e       	mov	r0, r18
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <GPIO_writePin+0x8c>
    1a18:	88 0f       	add	r24, r24
    1a1a:	99 1f       	adc	r25, r25
    1a1c:	0a 94       	dec	r0
    1a1e:	e2 f7       	brpl	.-8      	; 0x1a18 <GPIO_writePin+0x88>
    1a20:	84 2b       	or	r24, r20
    1a22:	8c 93       	st	X, r24
    1a24:	98 c0       	rjmp	.+304    	; 0x1b56 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1a26:	ab e3       	ldi	r26, 0x3B	; 59
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	eb e3       	ldi	r30, 0x3B	; 59
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	48 2f       	mov	r20, r24
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	28 2f       	mov	r18, r24
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	02 2e       	mov	r0, r18
    1a3e:	02 c0       	rjmp	.+4      	; 0x1a44 <GPIO_writePin+0xb4>
    1a40:	88 0f       	add	r24, r24
    1a42:	99 1f       	adc	r25, r25
    1a44:	0a 94       	dec	r0
    1a46:	e2 f7       	brpl	.-8      	; 0x1a40 <GPIO_writePin+0xb0>
    1a48:	80 95       	com	r24
    1a4a:	84 23       	and	r24, r20
    1a4c:	8c 93       	st	X, r24
    1a4e:	83 c0       	rjmp	.+262    	; 0x1b56 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	81 30       	cpi	r24, 0x01	; 1
    1a54:	a1 f4       	brne	.+40     	; 0x1a7e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1a56:	a8 e3       	ldi	r26, 0x38	; 56
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	e8 e3       	ldi	r30, 0x38	; 56
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	48 2f       	mov	r20, r24
    1a62:	8a 81       	ldd	r24, Y+2	; 0x02
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	02 2e       	mov	r0, r18
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <GPIO_writePin+0xe4>
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	0a 94       	dec	r0
    1a76:	e2 f7       	brpl	.-8      	; 0x1a70 <GPIO_writePin+0xe0>
    1a78:	84 2b       	or	r24, r20
    1a7a:	8c 93       	st	X, r24
    1a7c:	6c c0       	rjmp	.+216    	; 0x1b56 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1a7e:	a8 e3       	ldi	r26, 0x38	; 56
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e8 e3       	ldi	r30, 0x38	; 56
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	48 2f       	mov	r20, r24
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	28 2f       	mov	r18, r24
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	02 2e       	mov	r0, r18
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <GPIO_writePin+0x10c>
    1a98:	88 0f       	add	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	0a 94       	dec	r0
    1a9e:	e2 f7       	brpl	.-8      	; 0x1a98 <GPIO_writePin+0x108>
    1aa0:	80 95       	com	r24
    1aa2:	84 23       	and	r24, r20
    1aa4:	8c 93       	st	X, r24
    1aa6:	57 c0       	rjmp	.+174    	; 0x1b56 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aaa:	81 30       	cpi	r24, 0x01	; 1
    1aac:	a1 f4       	brne	.+40     	; 0x1ad6 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1aae:	a5 e3       	ldi	r26, 0x35	; 53
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	e5 e3       	ldi	r30, 0x35	; 53
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	48 2f       	mov	r20, r24
    1aba:	8a 81       	ldd	r24, Y+2	; 0x02
    1abc:	28 2f       	mov	r18, r24
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	02 2e       	mov	r0, r18
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <GPIO_writePin+0x13c>
    1ac8:	88 0f       	add	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	0a 94       	dec	r0
    1ace:	e2 f7       	brpl	.-8      	; 0x1ac8 <GPIO_writePin+0x138>
    1ad0:	84 2b       	or	r24, r20
    1ad2:	8c 93       	st	X, r24
    1ad4:	40 c0       	rjmp	.+128    	; 0x1b56 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1ad6:	a5 e3       	ldi	r26, 0x35	; 53
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	e5 e3       	ldi	r30, 0x35	; 53
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	48 2f       	mov	r20, r24
    1ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae4:	28 2f       	mov	r18, r24
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	02 2e       	mov	r0, r18
    1aee:	02 c0       	rjmp	.+4      	; 0x1af4 <GPIO_writePin+0x164>
    1af0:	88 0f       	add	r24, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	0a 94       	dec	r0
    1af6:	e2 f7       	brpl	.-8      	; 0x1af0 <GPIO_writePin+0x160>
    1af8:	80 95       	com	r24
    1afa:	84 23       	and	r24, r20
    1afc:	8c 93       	st	X, r24
    1afe:	2b c0       	rjmp	.+86     	; 0x1b56 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	81 30       	cpi	r24, 0x01	; 1
    1b04:	a1 f4       	brne	.+40     	; 0x1b2e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1b06:	a2 e3       	ldi	r26, 0x32	; 50
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	e2 e3       	ldi	r30, 0x32	; 50
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	48 2f       	mov	r20, r24
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	02 2e       	mov	r0, r18
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <GPIO_writePin+0x194>
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	0a 94       	dec	r0
    1b26:	e2 f7       	brpl	.-8      	; 0x1b20 <GPIO_writePin+0x190>
    1b28:	84 2b       	or	r24, r20
    1b2a:	8c 93       	st	X, r24
    1b2c:	14 c0       	rjmp	.+40     	; 0x1b56 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1b2e:	a2 e3       	ldi	r26, 0x32	; 50
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e2 e3       	ldi	r30, 0x32	; 50
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	48 2f       	mov	r20, r24
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	28 2f       	mov	r18, r24
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	02 2e       	mov	r0, r18
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <GPIO_writePin+0x1bc>
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	0a 94       	dec	r0
    1b4e:	e2 f7       	brpl	.-8      	; 0x1b48 <GPIO_writePin+0x1b8>
    1b50:	80 95       	com	r24
    1b52:	84 23       	and	r24, r20
    1b54:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	08 95       	ret

00001b66 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	00 d0       	rcall	.+0      	; 0x1b6c <GPIO_readPin+0x6>
    1b6c:	00 d0       	rcall	.+0      	; 0x1b6e <GPIO_readPin+0x8>
    1b6e:	0f 92       	push	r0
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	8a 83       	std	Y+2, r24	; 0x02
    1b76:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1b78:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	88 30       	cpi	r24, 0x08	; 8
    1b7e:	08 f0       	brcs	.+2      	; 0x1b82 <GPIO_readPin+0x1c>
    1b80:	84 c0       	rjmp	.+264    	; 0x1c8a <GPIO_readPin+0x124>
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	84 30       	cpi	r24, 0x04	; 4
    1b86:	08 f0       	brcs	.+2      	; 0x1b8a <GPIO_readPin+0x24>
    1b88:	80 c0       	rjmp	.+256    	; 0x1c8a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	3d 83       	std	Y+5, r19	; 0x05
    1b92:	2c 83       	std	Y+4, r18	; 0x04
    1b94:	4c 81       	ldd	r20, Y+4	; 0x04
    1b96:	5d 81       	ldd	r21, Y+5	; 0x05
    1b98:	41 30       	cpi	r20, 0x01	; 1
    1b9a:	51 05       	cpc	r21, r1
    1b9c:	79 f1       	breq	.+94     	; 0x1bfc <GPIO_readPin+0x96>
    1b9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba2:	82 30       	cpi	r24, 0x02	; 2
    1ba4:	91 05       	cpc	r25, r1
    1ba6:	34 f4       	brge	.+12     	; 0x1bb4 <GPIO_readPin+0x4e>
    1ba8:	2c 81       	ldd	r18, Y+4	; 0x04
    1baa:	3d 81       	ldd	r19, Y+5	; 0x05
    1bac:	21 15       	cp	r18, r1
    1bae:	31 05       	cpc	r19, r1
    1bb0:	69 f0       	breq	.+26     	; 0x1bcc <GPIO_readPin+0x66>
    1bb2:	6b c0       	rjmp	.+214    	; 0x1c8a <GPIO_readPin+0x124>
    1bb4:	4c 81       	ldd	r20, Y+4	; 0x04
    1bb6:	5d 81       	ldd	r21, Y+5	; 0x05
    1bb8:	42 30       	cpi	r20, 0x02	; 2
    1bba:	51 05       	cpc	r21, r1
    1bbc:	b9 f1       	breq	.+110    	; 0x1c2c <GPIO_readPin+0xc6>
    1bbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc0:	9d 81       	ldd	r25, Y+5	; 0x05
    1bc2:	83 30       	cpi	r24, 0x03	; 3
    1bc4:	91 05       	cpc	r25, r1
    1bc6:	09 f4       	brne	.+2      	; 0x1bca <GPIO_readPin+0x64>
    1bc8:	49 c0       	rjmp	.+146    	; 0x1c5c <GPIO_readPin+0xf6>
    1bca:	5f c0       	rjmp	.+190    	; 0x1c8a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1bcc:	e9 e3       	ldi	r30, 0x39	; 57
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	88 2f       	mov	r24, r24
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	a9 01       	movw	r20, r18
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <GPIO_readPin+0x7e>
    1be0:	55 95       	asr	r21
    1be2:	47 95       	ror	r20
    1be4:	8a 95       	dec	r24
    1be6:	e2 f7       	brpl	.-8      	; 0x1be0 <GPIO_readPin+0x7a>
    1be8:	ca 01       	movw	r24, r20
    1bea:	81 70       	andi	r24, 0x01	; 1
    1bec:	90 70       	andi	r25, 0x00	; 0
    1bee:	88 23       	and	r24, r24
    1bf0:	19 f0       	breq	.+6      	; 0x1bf8 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	89 83       	std	Y+1, r24	; 0x01
    1bf6:	49 c0       	rjmp	.+146    	; 0x1c8a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1bf8:	19 82       	std	Y+1, r1	; 0x01
    1bfa:	47 c0       	rjmp	.+142    	; 0x1c8a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1bfc:	e6 e3       	ldi	r30, 0x36	; 54
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	28 2f       	mov	r18, r24
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	8b 81       	ldd	r24, Y+3	; 0x03
    1c08:	88 2f       	mov	r24, r24
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	a9 01       	movw	r20, r18
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <GPIO_readPin+0xae>
    1c10:	55 95       	asr	r21
    1c12:	47 95       	ror	r20
    1c14:	8a 95       	dec	r24
    1c16:	e2 f7       	brpl	.-8      	; 0x1c10 <GPIO_readPin+0xaa>
    1c18:	ca 01       	movw	r24, r20
    1c1a:	81 70       	andi	r24, 0x01	; 1
    1c1c:	90 70       	andi	r25, 0x00	; 0
    1c1e:	88 23       	and	r24, r24
    1c20:	19 f0       	breq	.+6      	; 0x1c28 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	89 83       	std	Y+1, r24	; 0x01
    1c26:	31 c0       	rjmp	.+98     	; 0x1c8a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c28:	19 82       	std	Y+1, r1	; 0x01
    1c2a:	2f c0       	rjmp	.+94     	; 0x1c8a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1c2c:	e3 e3       	ldi	r30, 0x33	; 51
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	88 2f       	mov	r24, r24
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	a9 01       	movw	r20, r18
    1c3e:	02 c0       	rjmp	.+4      	; 0x1c44 <GPIO_readPin+0xde>
    1c40:	55 95       	asr	r21
    1c42:	47 95       	ror	r20
    1c44:	8a 95       	dec	r24
    1c46:	e2 f7       	brpl	.-8      	; 0x1c40 <GPIO_readPin+0xda>
    1c48:	ca 01       	movw	r24, r20
    1c4a:	81 70       	andi	r24, 0x01	; 1
    1c4c:	90 70       	andi	r25, 0x00	; 0
    1c4e:	88 23       	and	r24, r24
    1c50:	19 f0       	breq	.+6      	; 0x1c58 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	89 83       	std	Y+1, r24	; 0x01
    1c56:	19 c0       	rjmp	.+50     	; 0x1c8a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c58:	19 82       	std	Y+1, r1	; 0x01
    1c5a:	17 c0       	rjmp	.+46     	; 0x1c8a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1c5c:	e0 e3       	ldi	r30, 0x30	; 48
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	28 2f       	mov	r18, r24
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	88 2f       	mov	r24, r24
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	a9 01       	movw	r20, r18
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <GPIO_readPin+0x10e>
    1c70:	55 95       	asr	r21
    1c72:	47 95       	ror	r20
    1c74:	8a 95       	dec	r24
    1c76:	e2 f7       	brpl	.-8      	; 0x1c70 <GPIO_readPin+0x10a>
    1c78:	ca 01       	movw	r24, r20
    1c7a:	81 70       	andi	r24, 0x01	; 1
    1c7c:	90 70       	andi	r25, 0x00	; 0
    1c7e:	88 23       	and	r24, r24
    1c80:	19 f0       	breq	.+6      	; 0x1c88 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	89 83       	std	Y+1, r24	; 0x01
    1c86:	01 c0       	rjmp	.+2      	; 0x1c8a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c88:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	08 95       	ret

00001c9c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	00 d0       	rcall	.+0      	; 0x1ca2 <GPIO_setupPortDirection+0x6>
    1ca2:	00 d0       	rcall	.+0      	; 0x1ca4 <GPIO_setupPortDirection+0x8>
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
    1ca8:	89 83       	std	Y+1, r24	; 0x01
    1caa:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
    1cae:	84 30       	cpi	r24, 0x04	; 4
    1cb0:	90 f5       	brcc	.+100    	; 0x1d16 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	3c 83       	std	Y+4, r19	; 0x04
    1cba:	2b 83       	std	Y+3, r18	; 0x03
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc0:	81 30       	cpi	r24, 0x01	; 1
    1cc2:	91 05       	cpc	r25, r1
    1cc4:	d1 f0       	breq	.+52     	; 0x1cfa <GPIO_setupPortDirection+0x5e>
    1cc6:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc8:	3c 81       	ldd	r19, Y+4	; 0x04
    1cca:	22 30       	cpi	r18, 0x02	; 2
    1ccc:	31 05       	cpc	r19, r1
    1cce:	2c f4       	brge	.+10     	; 0x1cda <GPIO_setupPortDirection+0x3e>
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd4:	00 97       	sbiw	r24, 0x00	; 0
    1cd6:	61 f0       	breq	.+24     	; 0x1cf0 <GPIO_setupPortDirection+0x54>
    1cd8:	1e c0       	rjmp	.+60     	; 0x1d16 <GPIO_setupPortDirection+0x7a>
    1cda:	2b 81       	ldd	r18, Y+3	; 0x03
    1cdc:	3c 81       	ldd	r19, Y+4	; 0x04
    1cde:	22 30       	cpi	r18, 0x02	; 2
    1ce0:	31 05       	cpc	r19, r1
    1ce2:	81 f0       	breq	.+32     	; 0x1d04 <GPIO_setupPortDirection+0x68>
    1ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce8:	83 30       	cpi	r24, 0x03	; 3
    1cea:	91 05       	cpc	r25, r1
    1cec:	81 f0       	breq	.+32     	; 0x1d0e <GPIO_setupPortDirection+0x72>
    1cee:	13 c0       	rjmp	.+38     	; 0x1d16 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1cf0:	ea e3       	ldi	r30, 0x3A	; 58
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf6:	80 83       	st	Z, r24
    1cf8:	0e c0       	rjmp	.+28     	; 0x1d16 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1cfa:	e7 e3       	ldi	r30, 0x37	; 55
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1d00:	80 83       	st	Z, r24
    1d02:	09 c0       	rjmp	.+18     	; 0x1d16 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1d04:	e4 e3       	ldi	r30, 0x34	; 52
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	80 83       	st	Z, r24
    1d0c:	04 c0       	rjmp	.+8      	; 0x1d16 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1d0e:	e1 e3       	ldi	r30, 0x31	; 49
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	8a 81       	ldd	r24, Y+2	; 0x02
    1d14:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	cf 91       	pop	r28
    1d20:	df 91       	pop	r29
    1d22:	08 95       	ret

00001d24 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <GPIO_writePort+0x6>
    1d2a:	00 d0       	rcall	.+0      	; 0x1d2c <GPIO_writePort+0x8>
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	89 83       	std	Y+1, r24	; 0x01
    1d32:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	84 30       	cpi	r24, 0x04	; 4
    1d38:	90 f5       	brcc	.+100    	; 0x1d9e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	3c 83       	std	Y+4, r19	; 0x04
    1d42:	2b 83       	std	Y+3, r18	; 0x03
    1d44:	8b 81       	ldd	r24, Y+3	; 0x03
    1d46:	9c 81       	ldd	r25, Y+4	; 0x04
    1d48:	81 30       	cpi	r24, 0x01	; 1
    1d4a:	91 05       	cpc	r25, r1
    1d4c:	d1 f0       	breq	.+52     	; 0x1d82 <GPIO_writePort+0x5e>
    1d4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d50:	3c 81       	ldd	r19, Y+4	; 0x04
    1d52:	22 30       	cpi	r18, 0x02	; 2
    1d54:	31 05       	cpc	r19, r1
    1d56:	2c f4       	brge	.+10     	; 0x1d62 <GPIO_writePort+0x3e>
    1d58:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5c:	00 97       	sbiw	r24, 0x00	; 0
    1d5e:	61 f0       	breq	.+24     	; 0x1d78 <GPIO_writePort+0x54>
    1d60:	1e c0       	rjmp	.+60     	; 0x1d9e <GPIO_writePort+0x7a>
    1d62:	2b 81       	ldd	r18, Y+3	; 0x03
    1d64:	3c 81       	ldd	r19, Y+4	; 0x04
    1d66:	22 30       	cpi	r18, 0x02	; 2
    1d68:	31 05       	cpc	r19, r1
    1d6a:	81 f0       	breq	.+32     	; 0x1d8c <GPIO_writePort+0x68>
    1d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d70:	83 30       	cpi	r24, 0x03	; 3
    1d72:	91 05       	cpc	r25, r1
    1d74:	81 f0       	breq	.+32     	; 0x1d96 <GPIO_writePort+0x72>
    1d76:	13 c0       	rjmp	.+38     	; 0x1d9e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1d78:	eb e3       	ldi	r30, 0x3B	; 59
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7e:	80 83       	st	Z, r24
    1d80:	0e c0       	rjmp	.+28     	; 0x1d9e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1d82:	e8 e3       	ldi	r30, 0x38	; 56
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	80 83       	st	Z, r24
    1d8a:	09 c0       	rjmp	.+18     	; 0x1d9e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1d8c:	e5 e3       	ldi	r30, 0x35	; 53
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	8a 81       	ldd	r24, Y+2	; 0x02
    1d92:	80 83       	st	Z, r24
    1d94:	04 c0       	rjmp	.+8      	; 0x1d9e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1d96:	e2 e3       	ldi	r30, 0x32	; 50
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9c:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	08 95       	ret

00001dac <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	00 d0       	rcall	.+0      	; 0x1db2 <GPIO_readPort+0x6>
    1db2:	00 d0       	rcall	.+0      	; 0x1db4 <GPIO_readPort+0x8>
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
    1db8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1dba:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	84 30       	cpi	r24, 0x04	; 4
    1dc0:	90 f5       	brcc	.+100    	; 0x1e26 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc4:	28 2f       	mov	r18, r24
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	3c 83       	std	Y+4, r19	; 0x04
    1dca:	2b 83       	std	Y+3, r18	; 0x03
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd0:	81 30       	cpi	r24, 0x01	; 1
    1dd2:	91 05       	cpc	r25, r1
    1dd4:	d1 f0       	breq	.+52     	; 0x1e0a <GPIO_readPort+0x5e>
    1dd6:	2b 81       	ldd	r18, Y+3	; 0x03
    1dd8:	3c 81       	ldd	r19, Y+4	; 0x04
    1dda:	22 30       	cpi	r18, 0x02	; 2
    1ddc:	31 05       	cpc	r19, r1
    1dde:	2c f4       	brge	.+10     	; 0x1dea <GPIO_readPort+0x3e>
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	9c 81       	ldd	r25, Y+4	; 0x04
    1de4:	00 97       	sbiw	r24, 0x00	; 0
    1de6:	61 f0       	breq	.+24     	; 0x1e00 <GPIO_readPort+0x54>
    1de8:	1e c0       	rjmp	.+60     	; 0x1e26 <GPIO_readPort+0x7a>
    1dea:	2b 81       	ldd	r18, Y+3	; 0x03
    1dec:	3c 81       	ldd	r19, Y+4	; 0x04
    1dee:	22 30       	cpi	r18, 0x02	; 2
    1df0:	31 05       	cpc	r19, r1
    1df2:	81 f0       	breq	.+32     	; 0x1e14 <GPIO_readPort+0x68>
    1df4:	8b 81       	ldd	r24, Y+3	; 0x03
    1df6:	9c 81       	ldd	r25, Y+4	; 0x04
    1df8:	83 30       	cpi	r24, 0x03	; 3
    1dfa:	91 05       	cpc	r25, r1
    1dfc:	81 f0       	breq	.+32     	; 0x1e1e <GPIO_readPort+0x72>
    1dfe:	13 c0       	rjmp	.+38     	; 0x1e26 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1e00:	e9 e3       	ldi	r30, 0x39	; 57
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	89 83       	std	Y+1, r24	; 0x01
    1e08:	0e c0       	rjmp	.+28     	; 0x1e26 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1e0a:	e6 e3       	ldi	r30, 0x36	; 54
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	89 83       	std	Y+1, r24	; 0x01
    1e12:	09 c0       	rjmp	.+18     	; 0x1e26 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1e14:	e3 e3       	ldi	r30, 0x33	; 51
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	89 83       	std	Y+1, r24	; 0x01
    1e1c:	04 c0       	rjmp	.+8      	; 0x1e26 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1e1e:	e0 e3       	ldi	r30, 0x30	; 48
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	08 95       	ret

00001e36 <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    1e36:	1f 92       	push	r1
    1e38:	0f 92       	push	r0
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	0f 92       	push	r0
    1e3e:	11 24       	eor	r1, r1
    1e40:	2f 93       	push	r18
    1e42:	3f 93       	push	r19
    1e44:	4f 93       	push	r20
    1e46:	5f 93       	push	r21
    1e48:	6f 93       	push	r22
    1e4a:	7f 93       	push	r23
    1e4c:	8f 93       	push	r24
    1e4e:	9f 93       	push	r25
    1e50:	af 93       	push	r26
    1e52:	bf 93       	push	r27
    1e54:	ef 93       	push	r30
    1e56:	ff 93       	push	r31
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1e60:	80 91 91 01 	lds	r24, 0x0191
    1e64:	90 91 92 01 	lds	r25, 0x0192
    1e68:	00 97       	sbiw	r24, 0x00	; 0
    1e6a:	29 f0       	breq	.+10     	; 0x1e76 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1e6c:	e0 91 91 01 	lds	r30, 0x0191
    1e70:	f0 91 92 01 	lds	r31, 0x0192
    1e74:	09 95       	icall
	}
}
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	ff 91       	pop	r31
    1e7c:	ef 91       	pop	r30
    1e7e:	bf 91       	pop	r27
    1e80:	af 91       	pop	r26
    1e82:	9f 91       	pop	r25
    1e84:	8f 91       	pop	r24
    1e86:	7f 91       	pop	r23
    1e88:	6f 91       	pop	r22
    1e8a:	5f 91       	pop	r21
    1e8c:	4f 91       	pop	r20
    1e8e:	3f 91       	pop	r19
    1e90:	2f 91       	pop	r18
    1e92:	0f 90       	pop	r0
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	0f 90       	pop	r0
    1e98:	1f 90       	pop	r1
    1e9a:	18 95       	reti

00001e9c <ICU_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void ICU_init(const ICU_ConfigType * Config_Ptr)
{
    1e9c:	df 93       	push	r29
    1e9e:	cf 93       	push	r28
    1ea0:	00 d0       	rcall	.+0      	; 0x1ea2 <ICU_init+0x6>
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	9a 83       	std	Y+2, r25	; 0x02
    1ea8:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
    1eaa:	a1 e3       	ldi	r26, 0x31	; 49
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	e1 e3       	ldi	r30, 0x31	; 49
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	8f 7b       	andi	r24, 0xBF	; 191
    1eb6:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1eb8:	ef e4       	ldi	r30, 0x4F	; 79
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	8c e0       	ldi	r24, 0x0C	; 12
    1ebe:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    1ec0:	ae e4       	ldi	r26, 0x4E	; 78
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	ee e4       	ldi	r30, 0x4E	; 78
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	98 2f       	mov	r25, r24
    1ecc:	98 7f       	andi	r25, 0xF8	; 248
    1ece:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed2:	80 81       	ld	r24, Z
    1ed4:	89 2b       	or	r24, r25
    1ed6:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    1ed8:	ae e4       	ldi	r26, 0x4E	; 78
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	ee e4       	ldi	r30, 0x4E	; 78
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	28 2f       	mov	r18, r24
    1ee4:	2f 7b       	andi	r18, 0xBF	; 191
    1ee6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eea:	81 81       	ldd	r24, Z+1	; 0x01
    1eec:	88 2f       	mov	r24, r24
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	00 24       	eor	r0, r0
    1ef2:	96 95       	lsr	r25
    1ef4:	87 95       	ror	r24
    1ef6:	07 94       	ror	r0
    1ef8:	96 95       	lsr	r25
    1efa:	87 95       	ror	r24
    1efc:	07 94       	ror	r0
    1efe:	98 2f       	mov	r25, r24
    1f00:	80 2d       	mov	r24, r0
    1f02:	82 2b       	or	r24, r18
    1f04:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    1f06:	ec e4       	ldi	r30, 0x4C	; 76
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	11 82       	std	Z+1, r1	; 0x01
    1f0c:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    1f0e:	e6 e4       	ldi	r30, 0x46	; 70
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	11 82       	std	Z+1, r1	; 0x01
    1f14:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    1f16:	a9 e5       	ldi	r26, 0x59	; 89
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	e9 e5       	ldi	r30, 0x59	; 89
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	80 62       	ori	r24, 0x20	; 32
    1f22:	8c 93       	st	X, r24
}
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	08 95       	ret

00001f2e <ICU_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	00 d0       	rcall	.+0      	; 0x1f34 <ICU_setCallBack+0x6>
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
    1f38:	9a 83       	std	Y+2, r25	; 0x02
    1f3a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f40:	90 93 92 01 	sts	0x0192, r25
    1f44:	80 93 91 01 	sts	0x0191, r24
}
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	cf 91       	pop	r28
    1f4e:	df 91       	pop	r29
    1f50:	08 95       	ret

00001f52 <ICU_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	0f 92       	push	r0
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    1f5e:	ae e4       	ldi	r26, 0x4E	; 78
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	ee e4       	ldi	r30, 0x4E	; 78
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	28 2f       	mov	r18, r24
    1f6a:	2f 7b       	andi	r18, 0xBF	; 191
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	88 2f       	mov	r24, r24
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	00 24       	eor	r0, r0
    1f74:	96 95       	lsr	r25
    1f76:	87 95       	ror	r24
    1f78:	07 94       	ror	r0
    1f7a:	96 95       	lsr	r25
    1f7c:	87 95       	ror	r24
    1f7e:	07 94       	ror	r0
    1f80:	98 2f       	mov	r25, r24
    1f82:	80 2d       	mov	r24, r0
    1f84:	82 2b       	or	r24, r18
    1f86:	8c 93       	st	X, r24
}
    1f88:	0f 90       	pop	r0
    1f8a:	cf 91       	pop	r28
    1f8c:	df 91       	pop	r29
    1f8e:	08 95       	ret

00001f90 <ICU_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 ICU_getInputCaptureValue(void)
{
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1f98:	e6 e4       	ldi	r30, 0x46	; 70
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	91 81       	ldd	r25, Z+1	; 0x01
}
    1fa0:	cf 91       	pop	r28
    1fa2:	df 91       	pop	r29
    1fa4:	08 95       	ret

00001fa6 <ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_clearTimerValue(void)
{
    1fa6:	df 93       	push	r29
    1fa8:	cf 93       	push	r28
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1fae:	ec e4       	ldi	r30, 0x4C	; 76
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	11 82       	std	Z+1, r1	; 0x01
    1fb4:	10 82       	st	Z, r1
}
    1fb6:	cf 91       	pop	r28
    1fb8:	df 91       	pop	r29
    1fba:	08 95       	ret

00001fbc <ICU_deInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void ICU_deInit(void)
{
    1fbc:	df 93       	push	r29
    1fbe:	cf 93       	push	r28
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TCCR1A = 0;
    1fc4:	ef e4       	ldi	r30, 0x4F	; 79
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	10 82       	st	Z, r1
	TCCR1B = 0;
    1fca:	ee e4       	ldi	r30, 0x4E	; 78
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	10 82       	st	Z, r1
	TCNT1 = 0;
    1fd0:	ec e4       	ldi	r30, 0x4C	; 76
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	11 82       	std	Z+1, r1	; 0x01
    1fd6:	10 82       	st	Z, r1
	ICR1 = 0;
    1fd8:	e6 e4       	ldi	r30, 0x46	; 70
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	11 82       	std	Z+1, r1	; 0x01
    1fde:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    1fe0:	a9 e5       	ldi	r26, 0x59	; 89
    1fe2:	b0 e0       	ldi	r27, 0x00	; 0
    1fe4:	e9 e5       	ldi	r30, 0x59	; 89
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	8f 7d       	andi	r24, 0xDF	; 223
    1fec:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    1fee:	10 92 92 01 	sts	0x0192, r1
    1ff2:	10 92 91 01 	sts	0x0191, r1
}
    1ff6:	cf 91       	pop	r28
    1ff8:	df 91       	pop	r29
    1ffa:	08 95       	ret

00001ffc <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1ffc:	df 93       	push	r29
    1ffe:	cf 93       	push	r28
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
    2004:	2e 97       	sbiw	r28, 0x0e	; 14
    2006:	0f b6       	in	r0, 0x3f	; 63
    2008:	f8 94       	cli
    200a:	de bf       	out	0x3e, r29	; 62
    200c:	0f be       	out	0x3f, r0	; 63
    200e:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	61 e0       	ldi	r22, 0x01	; 1
    2014:	41 e0       	ldi	r20, 0x01	; 1
    2016:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	62 e0       	ldi	r22, 0x02	; 2
    201e:	41 e0       	ldi	r20, 0x01	; 1
    2020:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <GPIO_setupPinDirection>
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	a0 ea       	ldi	r26, 0xA0	; 160
    202a:	b1 e4       	ldi	r27, 0x41	; 65
    202c:	8b 87       	std	Y+11, r24	; 0x0b
    202e:	9c 87       	std	Y+12, r25	; 0x0c
    2030:	ad 87       	std	Y+13, r26	; 0x0d
    2032:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2034:	6b 85       	ldd	r22, Y+11	; 0x0b
    2036:	7c 85       	ldd	r23, Y+12	; 0x0c
    2038:	8d 85       	ldd	r24, Y+13	; 0x0d
    203a:	9e 85       	ldd	r25, Y+14	; 0x0e
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	4a e7       	ldi	r20, 0x7A	; 122
    2042:	55 e4       	ldi	r21, 0x45	; 69
    2044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	8f 83       	std	Y+7, r24	; 0x07
    204e:	98 87       	std	Y+8, r25	; 0x08
    2050:	a9 87       	std	Y+9, r26	; 0x09
    2052:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2054:	6f 81       	ldd	r22, Y+7	; 0x07
    2056:	78 85       	ldd	r23, Y+8	; 0x08
    2058:	89 85       	ldd	r24, Y+9	; 0x09
    205a:	9a 85       	ldd	r25, Y+10	; 0x0a
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e8       	ldi	r20, 0x80	; 128
    2062:	5f e3       	ldi	r21, 0x3F	; 63
    2064:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2068:	88 23       	and	r24, r24
    206a:	2c f4       	brge	.+10     	; 0x2076 <LCD_init+0x7a>
		__ticks = 1;
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	9e 83       	std	Y+6, r25	; 0x06
    2072:	8d 83       	std	Y+5, r24	; 0x05
    2074:	3f c0       	rjmp	.+126    	; 0x20f4 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2076:	6f 81       	ldd	r22, Y+7	; 0x07
    2078:	78 85       	ldd	r23, Y+8	; 0x08
    207a:	89 85       	ldd	r24, Y+9	; 0x09
    207c:	9a 85       	ldd	r25, Y+10	; 0x0a
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	3f ef       	ldi	r19, 0xFF	; 255
    2082:	4f e7       	ldi	r20, 0x7F	; 127
    2084:	57 e4       	ldi	r21, 0x47	; 71
    2086:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    208a:	18 16       	cp	r1, r24
    208c:	4c f5       	brge	.+82     	; 0x20e0 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2090:	7c 85       	ldd	r23, Y+12	; 0x0c
    2092:	8d 85       	ldd	r24, Y+13	; 0x0d
    2094:	9e 85       	ldd	r25, Y+14	; 0x0e
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	40 e2       	ldi	r20, 0x20	; 32
    209c:	51 e4       	ldi	r21, 0x41	; 65
    209e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	bc 01       	movw	r22, r24
    20a8:	cd 01       	movw	r24, r26
    20aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	9e 83       	std	Y+6, r25	; 0x06
    20b4:	8d 83       	std	Y+5, r24	; 0x05
    20b6:	0f c0       	rjmp	.+30     	; 0x20d6 <LCD_init+0xda>
    20b8:	80 e9       	ldi	r24, 0x90	; 144
    20ba:	91 e0       	ldi	r25, 0x01	; 1
    20bc:	9c 83       	std	Y+4, r25	; 0x04
    20be:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	9c 81       	ldd	r25, Y+4	; 0x04
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	f1 f7       	brne	.-4      	; 0x20c4 <LCD_init+0xc8>
    20c8:	9c 83       	std	Y+4, r25	; 0x04
    20ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20cc:	8d 81       	ldd	r24, Y+5	; 0x05
    20ce:	9e 81       	ldd	r25, Y+6	; 0x06
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	9e 83       	std	Y+6, r25	; 0x06
    20d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d6:	8d 81       	ldd	r24, Y+5	; 0x05
    20d8:	9e 81       	ldd	r25, Y+6	; 0x06
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	69 f7       	brne	.-38     	; 0x20b8 <LCD_init+0xbc>
    20de:	14 c0       	rjmp	.+40     	; 0x2108 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e0:	6f 81       	ldd	r22, Y+7	; 0x07
    20e2:	78 85       	ldd	r23, Y+8	; 0x08
    20e4:	89 85       	ldd	r24, Y+9	; 0x09
    20e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	9e 83       	std	Y+6, r25	; 0x06
    20f2:	8d 83       	std	Y+5, r24	; 0x05
    20f4:	8d 81       	ldd	r24, Y+5	; 0x05
    20f6:	9e 81       	ldd	r25, Y+6	; 0x06
    20f8:	9a 83       	std	Y+2, r25	; 0x02
    20fa:	89 83       	std	Y+1, r24	; 0x01
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
    20fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	f1 f7       	brne	.-4      	; 0x2100 <LCD_init+0x104>
    2104:	9a 83       	std	Y+2, r25	; 0x02
    2106:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	63 e0       	ldi	r22, 0x03	; 3
    210c:	41 e0       	ldi	r20, 0x01	; 1
    210e:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	64 e0       	ldi	r22, 0x04	; 4
    2116:	41 e0       	ldi	r20, 0x01	; 1
    2118:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	65 e0       	ldi	r22, 0x05	; 5
    2120:	41 e0       	ldi	r20, 0x01	; 1
    2122:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	66 e0       	ldi	r22, 0x06	; 6
    212a:	41 e0       	ldi	r20, 0x01	; 1
    212c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    2130:	83 e3       	ldi	r24, 0x33	; 51
    2132:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    2136:	82 e3       	ldi	r24, 0x32	; 50
    2138:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    213c:	88 e2       	ldi	r24, 0x28	; 40
    213e:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2142:	8c e0       	ldi	r24, 0x0C	; 12
    2144:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_sendCommand>
}
    214e:	2e 96       	adiw	r28, 0x0e	; 14
    2150:	0f b6       	in	r0, 0x3f	; 63
    2152:	f8 94       	cli
    2154:	de bf       	out	0x3e, r29	; 62
    2156:	0f be       	out	0x3f, r0	; 63
    2158:	cd bf       	out	0x3d, r28	; 61
    215a:	cf 91       	pop	r28
    215c:	df 91       	pop	r29
    215e:	08 95       	ret

00002160 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2160:	0f 93       	push	r16
    2162:	1f 93       	push	r17
    2164:	df 93       	push	r29
    2166:	cf 93       	push	r28
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    216c:	c3 56       	subi	r28, 0x63	; 99
    216e:	d0 40       	sbci	r29, 0x00	; 0
    2170:	0f b6       	in	r0, 0x3f	; 63
    2172:	f8 94       	cli
    2174:	de bf       	out	0x3e, r29	; 62
    2176:	0f be       	out	0x3f, r0	; 63
    2178:	cd bf       	out	0x3d, r28	; 61
    217a:	fe 01       	movw	r30, r28
    217c:	ed 59       	subi	r30, 0x9D	; 157
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	61 e0       	ldi	r22, 0x01	; 1
    2186:	40 e0       	ldi	r20, 0x00	; 0
    2188:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
    218c:	fe 01       	movw	r30, r28
    218e:	e1 5a       	subi	r30, 0xA1	; 161
    2190:	ff 4f       	sbci	r31, 0xFF	; 255
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	a0 e8       	ldi	r26, 0x80	; 128
    2198:	bf e3       	ldi	r27, 0x3F	; 63
    219a:	80 83       	st	Z, r24
    219c:	91 83       	std	Z+1, r25	; 0x01
    219e:	a2 83       	std	Z+2, r26	; 0x02
    21a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a2:	8e 01       	movw	r16, r28
    21a4:	05 5a       	subi	r16, 0xA5	; 165
    21a6:	1f 4f       	sbci	r17, 0xFF	; 255
    21a8:	fe 01       	movw	r30, r28
    21aa:	e1 5a       	subi	r30, 0xA1	; 161
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	60 81       	ld	r22, Z
    21b0:	71 81       	ldd	r23, Z+1	; 0x01
    21b2:	82 81       	ldd	r24, Z+2	; 0x02
    21b4:	93 81       	ldd	r25, Z+3	; 0x03
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	4a e7       	ldi	r20, 0x7A	; 122
    21bc:	55 e4       	ldi	r21, 0x45	; 69
    21be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	f8 01       	movw	r30, r16
    21c8:	80 83       	st	Z, r24
    21ca:	91 83       	std	Z+1, r25	; 0x01
    21cc:	a2 83       	std	Z+2, r26	; 0x02
    21ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21d0:	fe 01       	movw	r30, r28
    21d2:	e5 5a       	subi	r30, 0xA5	; 165
    21d4:	ff 4f       	sbci	r31, 0xFF	; 255
    21d6:	60 81       	ld	r22, Z
    21d8:	71 81       	ldd	r23, Z+1	; 0x01
    21da:	82 81       	ldd	r24, Z+2	; 0x02
    21dc:	93 81       	ldd	r25, Z+3	; 0x03
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	40 e8       	ldi	r20, 0x80	; 128
    21e4:	5f e3       	ldi	r21, 0x3F	; 63
    21e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21ea:	88 23       	and	r24, r24
    21ec:	44 f4       	brge	.+16     	; 0x21fe <LCD_sendCommand+0x9e>
		__ticks = 1;
    21ee:	fe 01       	movw	r30, r28
    21f0:	e7 5a       	subi	r30, 0xA7	; 167
    21f2:	ff 4f       	sbci	r31, 0xFF	; 255
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	91 83       	std	Z+1, r25	; 0x01
    21fa:	80 83       	st	Z, r24
    21fc:	64 c0       	rjmp	.+200    	; 0x22c6 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    21fe:	fe 01       	movw	r30, r28
    2200:	e5 5a       	subi	r30, 0xA5	; 165
    2202:	ff 4f       	sbci	r31, 0xFF	; 255
    2204:	60 81       	ld	r22, Z
    2206:	71 81       	ldd	r23, Z+1	; 0x01
    2208:	82 81       	ldd	r24, Z+2	; 0x02
    220a:	93 81       	ldd	r25, Z+3	; 0x03
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	3f ef       	ldi	r19, 0xFF	; 255
    2210:	4f e7       	ldi	r20, 0x7F	; 127
    2212:	57 e4       	ldi	r21, 0x47	; 71
    2214:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2218:	18 16       	cp	r1, r24
    221a:	0c f0       	brlt	.+2      	; 0x221e <LCD_sendCommand+0xbe>
    221c:	43 c0       	rjmp	.+134    	; 0x22a4 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    221e:	fe 01       	movw	r30, r28
    2220:	e1 5a       	subi	r30, 0xA1	; 161
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	60 81       	ld	r22, Z
    2226:	71 81       	ldd	r23, Z+1	; 0x01
    2228:	82 81       	ldd	r24, Z+2	; 0x02
    222a:	93 81       	ldd	r25, Z+3	; 0x03
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e2       	ldi	r20, 0x20	; 32
    2232:	51 e4       	ldi	r21, 0x41	; 65
    2234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	8e 01       	movw	r16, r28
    223e:	07 5a       	subi	r16, 0xA7	; 167
    2240:	1f 4f       	sbci	r17, 0xFF	; 255
    2242:	bc 01       	movw	r22, r24
    2244:	cd 01       	movw	r24, r26
    2246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	f8 01       	movw	r30, r16
    2250:	91 83       	std	Z+1, r25	; 0x01
    2252:	80 83       	st	Z, r24
    2254:	1f c0       	rjmp	.+62     	; 0x2294 <LCD_sendCommand+0x134>
    2256:	fe 01       	movw	r30, r28
    2258:	e9 5a       	subi	r30, 0xA9	; 169
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	80 e9       	ldi	r24, 0x90	; 144
    225e:	91 e0       	ldi	r25, 0x01	; 1
    2260:	91 83       	std	Z+1, r25	; 0x01
    2262:	80 83       	st	Z, r24
    2264:	fe 01       	movw	r30, r28
    2266:	e9 5a       	subi	r30, 0xA9	; 169
    2268:	ff 4f       	sbci	r31, 0xFF	; 255
    226a:	80 81       	ld	r24, Z
    226c:	91 81       	ldd	r25, Z+1	; 0x01
    226e:	01 97       	sbiw	r24, 0x01	; 1
    2270:	f1 f7       	brne	.-4      	; 0x226e <LCD_sendCommand+0x10e>
    2272:	fe 01       	movw	r30, r28
    2274:	e9 5a       	subi	r30, 0xA9	; 169
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	91 83       	std	Z+1, r25	; 0x01
    227a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    227c:	de 01       	movw	r26, r28
    227e:	a7 5a       	subi	r26, 0xA7	; 167
    2280:	bf 4f       	sbci	r27, 0xFF	; 255
    2282:	fe 01       	movw	r30, r28
    2284:	e7 5a       	subi	r30, 0xA7	; 167
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	80 81       	ld	r24, Z
    228a:	91 81       	ldd	r25, Z+1	; 0x01
    228c:	01 97       	sbiw	r24, 0x01	; 1
    228e:	11 96       	adiw	r26, 0x01	; 1
    2290:	9c 93       	st	X, r25
    2292:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2294:	fe 01       	movw	r30, r28
    2296:	e7 5a       	subi	r30, 0xA7	; 167
    2298:	ff 4f       	sbci	r31, 0xFF	; 255
    229a:	80 81       	ld	r24, Z
    229c:	91 81       	ldd	r25, Z+1	; 0x01
    229e:	00 97       	sbiw	r24, 0x00	; 0
    22a0:	d1 f6       	brne	.-76     	; 0x2256 <LCD_sendCommand+0xf6>
    22a2:	27 c0       	rjmp	.+78     	; 0x22f2 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a4:	8e 01       	movw	r16, r28
    22a6:	07 5a       	subi	r16, 0xA7	; 167
    22a8:	1f 4f       	sbci	r17, 0xFF	; 255
    22aa:	fe 01       	movw	r30, r28
    22ac:	e5 5a       	subi	r30, 0xA5	; 165
    22ae:	ff 4f       	sbci	r31, 0xFF	; 255
    22b0:	60 81       	ld	r22, Z
    22b2:	71 81       	ldd	r23, Z+1	; 0x01
    22b4:	82 81       	ldd	r24, Z+2	; 0x02
    22b6:	93 81       	ldd	r25, Z+3	; 0x03
    22b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	f8 01       	movw	r30, r16
    22c2:	91 83       	std	Z+1, r25	; 0x01
    22c4:	80 83       	st	Z, r24
    22c6:	de 01       	movw	r26, r28
    22c8:	ab 5a       	subi	r26, 0xAB	; 171
    22ca:	bf 4f       	sbci	r27, 0xFF	; 255
    22cc:	fe 01       	movw	r30, r28
    22ce:	e7 5a       	subi	r30, 0xA7	; 167
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	80 81       	ld	r24, Z
    22d4:	91 81       	ldd	r25, Z+1	; 0x01
    22d6:	8d 93       	st	X+, r24
    22d8:	9c 93       	st	X, r25
    22da:	fe 01       	movw	r30, r28
    22dc:	eb 5a       	subi	r30, 0xAB	; 171
    22de:	ff 4f       	sbci	r31, 0xFF	; 255
    22e0:	80 81       	ld	r24, Z
    22e2:	91 81       	ldd	r25, Z+1	; 0x01
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	f1 f7       	brne	.-4      	; 0x22e4 <LCD_sendCommand+0x184>
    22e8:	fe 01       	movw	r30, r28
    22ea:	eb 5a       	subi	r30, 0xAB	; 171
    22ec:	ff 4f       	sbci	r31, 0xFF	; 255
    22ee:	91 83       	std	Z+1, r25	; 0x01
    22f0:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	62 e0       	ldi	r22, 0x02	; 2
    22f6:	41 e0       	ldi	r20, 0x01	; 1
    22f8:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
    22fc:	fe 01       	movw	r30, r28
    22fe:	ef 5a       	subi	r30, 0xAF	; 175
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	a0 e8       	ldi	r26, 0x80	; 128
    2308:	bf e3       	ldi	r27, 0x3F	; 63
    230a:	80 83       	st	Z, r24
    230c:	91 83       	std	Z+1, r25	; 0x01
    230e:	a2 83       	std	Z+2, r26	; 0x02
    2310:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2312:	8e 01       	movw	r16, r28
    2314:	03 5b       	subi	r16, 0xB3	; 179
    2316:	1f 4f       	sbci	r17, 0xFF	; 255
    2318:	fe 01       	movw	r30, r28
    231a:	ef 5a       	subi	r30, 0xAF	; 175
    231c:	ff 4f       	sbci	r31, 0xFF	; 255
    231e:	60 81       	ld	r22, Z
    2320:	71 81       	ldd	r23, Z+1	; 0x01
    2322:	82 81       	ldd	r24, Z+2	; 0x02
    2324:	93 81       	ldd	r25, Z+3	; 0x03
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	4a e7       	ldi	r20, 0x7A	; 122
    232c:	55 e4       	ldi	r21, 0x45	; 69
    232e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	f8 01       	movw	r30, r16
    2338:	80 83       	st	Z, r24
    233a:	91 83       	std	Z+1, r25	; 0x01
    233c:	a2 83       	std	Z+2, r26	; 0x02
    233e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2340:	fe 01       	movw	r30, r28
    2342:	e3 5b       	subi	r30, 0xB3	; 179
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	60 81       	ld	r22, Z
    2348:	71 81       	ldd	r23, Z+1	; 0x01
    234a:	82 81       	ldd	r24, Z+2	; 0x02
    234c:	93 81       	ldd	r25, Z+3	; 0x03
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	40 e8       	ldi	r20, 0x80	; 128
    2354:	5f e3       	ldi	r21, 0x3F	; 63
    2356:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    235a:	88 23       	and	r24, r24
    235c:	44 f4       	brge	.+16     	; 0x236e <LCD_sendCommand+0x20e>
		__ticks = 1;
    235e:	fe 01       	movw	r30, r28
    2360:	e5 5b       	subi	r30, 0xB5	; 181
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	91 83       	std	Z+1, r25	; 0x01
    236a:	80 83       	st	Z, r24
    236c:	64 c0       	rjmp	.+200    	; 0x2436 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    236e:	fe 01       	movw	r30, r28
    2370:	e3 5b       	subi	r30, 0xB3	; 179
    2372:	ff 4f       	sbci	r31, 0xFF	; 255
    2374:	60 81       	ld	r22, Z
    2376:	71 81       	ldd	r23, Z+1	; 0x01
    2378:	82 81       	ldd	r24, Z+2	; 0x02
    237a:	93 81       	ldd	r25, Z+3	; 0x03
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	3f ef       	ldi	r19, 0xFF	; 255
    2380:	4f e7       	ldi	r20, 0x7F	; 127
    2382:	57 e4       	ldi	r21, 0x47	; 71
    2384:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2388:	18 16       	cp	r1, r24
    238a:	0c f0       	brlt	.+2      	; 0x238e <LCD_sendCommand+0x22e>
    238c:	43 c0       	rjmp	.+134    	; 0x2414 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    238e:	fe 01       	movw	r30, r28
    2390:	ef 5a       	subi	r30, 0xAF	; 175
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	60 81       	ld	r22, Z
    2396:	71 81       	ldd	r23, Z+1	; 0x01
    2398:	82 81       	ldd	r24, Z+2	; 0x02
    239a:	93 81       	ldd	r25, Z+3	; 0x03
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	40 e2       	ldi	r20, 0x20	; 32
    23a2:	51 e4       	ldi	r21, 0x41	; 65
    23a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	8e 01       	movw	r16, r28
    23ae:	05 5b       	subi	r16, 0xB5	; 181
    23b0:	1f 4f       	sbci	r17, 0xFF	; 255
    23b2:	bc 01       	movw	r22, r24
    23b4:	cd 01       	movw	r24, r26
    23b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	f8 01       	movw	r30, r16
    23c0:	91 83       	std	Z+1, r25	; 0x01
    23c2:	80 83       	st	Z, r24
    23c4:	1f c0       	rjmp	.+62     	; 0x2404 <LCD_sendCommand+0x2a4>
    23c6:	fe 01       	movw	r30, r28
    23c8:	e7 5b       	subi	r30, 0xB7	; 183
    23ca:	ff 4f       	sbci	r31, 0xFF	; 255
    23cc:	80 e9       	ldi	r24, 0x90	; 144
    23ce:	91 e0       	ldi	r25, 0x01	; 1
    23d0:	91 83       	std	Z+1, r25	; 0x01
    23d2:	80 83       	st	Z, r24
    23d4:	fe 01       	movw	r30, r28
    23d6:	e7 5b       	subi	r30, 0xB7	; 183
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	80 81       	ld	r24, Z
    23dc:	91 81       	ldd	r25, Z+1	; 0x01
    23de:	01 97       	sbiw	r24, 0x01	; 1
    23e0:	f1 f7       	brne	.-4      	; 0x23de <LCD_sendCommand+0x27e>
    23e2:	fe 01       	movw	r30, r28
    23e4:	e7 5b       	subi	r30, 0xB7	; 183
    23e6:	ff 4f       	sbci	r31, 0xFF	; 255
    23e8:	91 83       	std	Z+1, r25	; 0x01
    23ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ec:	de 01       	movw	r26, r28
    23ee:	a5 5b       	subi	r26, 0xB5	; 181
    23f0:	bf 4f       	sbci	r27, 0xFF	; 255
    23f2:	fe 01       	movw	r30, r28
    23f4:	e5 5b       	subi	r30, 0xB5	; 181
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	80 81       	ld	r24, Z
    23fa:	91 81       	ldd	r25, Z+1	; 0x01
    23fc:	01 97       	sbiw	r24, 0x01	; 1
    23fe:	11 96       	adiw	r26, 0x01	; 1
    2400:	9c 93       	st	X, r25
    2402:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2404:	fe 01       	movw	r30, r28
    2406:	e5 5b       	subi	r30, 0xB5	; 181
    2408:	ff 4f       	sbci	r31, 0xFF	; 255
    240a:	80 81       	ld	r24, Z
    240c:	91 81       	ldd	r25, Z+1	; 0x01
    240e:	00 97       	sbiw	r24, 0x00	; 0
    2410:	d1 f6       	brne	.-76     	; 0x23c6 <LCD_sendCommand+0x266>
    2412:	27 c0       	rjmp	.+78     	; 0x2462 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2414:	8e 01       	movw	r16, r28
    2416:	05 5b       	subi	r16, 0xB5	; 181
    2418:	1f 4f       	sbci	r17, 0xFF	; 255
    241a:	fe 01       	movw	r30, r28
    241c:	e3 5b       	subi	r30, 0xB3	; 179
    241e:	ff 4f       	sbci	r31, 0xFF	; 255
    2420:	60 81       	ld	r22, Z
    2422:	71 81       	ldd	r23, Z+1	; 0x01
    2424:	82 81       	ldd	r24, Z+2	; 0x02
    2426:	93 81       	ldd	r25, Z+3	; 0x03
    2428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	f8 01       	movw	r30, r16
    2432:	91 83       	std	Z+1, r25	; 0x01
    2434:	80 83       	st	Z, r24
    2436:	de 01       	movw	r26, r28
    2438:	a9 5b       	subi	r26, 0xB9	; 185
    243a:	bf 4f       	sbci	r27, 0xFF	; 255
    243c:	fe 01       	movw	r30, r28
    243e:	e5 5b       	subi	r30, 0xB5	; 181
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	80 81       	ld	r24, Z
    2444:	91 81       	ldd	r25, Z+1	; 0x01
    2446:	8d 93       	st	X+, r24
    2448:	9c 93       	st	X, r25
    244a:	fe 01       	movw	r30, r28
    244c:	e9 5b       	subi	r30, 0xB9	; 185
    244e:	ff 4f       	sbci	r31, 0xFF	; 255
    2450:	80 81       	ld	r24, Z
    2452:	91 81       	ldd	r25, Z+1	; 0x01
    2454:	01 97       	sbiw	r24, 0x01	; 1
    2456:	f1 f7       	brne	.-4      	; 0x2454 <LCD_sendCommand+0x2f4>
    2458:	fe 01       	movw	r30, r28
    245a:	e9 5b       	subi	r30, 0xB9	; 185
    245c:	ff 4f       	sbci	r31, 0xFF	; 255
    245e:	91 83       	std	Z+1, r25	; 0x01
    2460:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    2462:	fe 01       	movw	r30, r28
    2464:	ed 59       	subi	r30, 0x9D	; 157
    2466:	ff 4f       	sbci	r31, 0xFF	; 255
    2468:	80 81       	ld	r24, Z
    246a:	88 2f       	mov	r24, r24
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	80 71       	andi	r24, 0x10	; 16
    2470:	90 70       	andi	r25, 0x00	; 0
    2472:	95 95       	asr	r25
    2474:	87 95       	ror	r24
    2476:	95 95       	asr	r25
    2478:	87 95       	ror	r24
    247a:	95 95       	asr	r25
    247c:	87 95       	ror	r24
    247e:	95 95       	asr	r25
    2480:	87 95       	ror	r24
    2482:	98 2f       	mov	r25, r24
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	63 e0       	ldi	r22, 0x03	; 3
    2488:	49 2f       	mov	r20, r25
    248a:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    248e:	fe 01       	movw	r30, r28
    2490:	ed 59       	subi	r30, 0x9D	; 157
    2492:	ff 4f       	sbci	r31, 0xFF	; 255
    2494:	80 81       	ld	r24, Z
    2496:	88 2f       	mov	r24, r24
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	80 72       	andi	r24, 0x20	; 32
    249c:	90 70       	andi	r25, 0x00	; 0
    249e:	95 95       	asr	r25
    24a0:	87 95       	ror	r24
    24a2:	95 95       	asr	r25
    24a4:	87 95       	ror	r24
    24a6:	95 95       	asr	r25
    24a8:	87 95       	ror	r24
    24aa:	95 95       	asr	r25
    24ac:	87 95       	ror	r24
    24ae:	95 95       	asr	r25
    24b0:	87 95       	ror	r24
    24b2:	98 2f       	mov	r25, r24
    24b4:	80 e0       	ldi	r24, 0x00	; 0
    24b6:	64 e0       	ldi	r22, 0x04	; 4
    24b8:	49 2f       	mov	r20, r25
    24ba:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    24be:	fe 01       	movw	r30, r28
    24c0:	ed 59       	subi	r30, 0x9D	; 157
    24c2:	ff 4f       	sbci	r31, 0xFF	; 255
    24c4:	80 81       	ld	r24, Z
    24c6:	88 2f       	mov	r24, r24
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	80 74       	andi	r24, 0x40	; 64
    24cc:	90 70       	andi	r25, 0x00	; 0
    24ce:	08 2e       	mov	r0, r24
    24d0:	89 2f       	mov	r24, r25
    24d2:	00 0c       	add	r0, r0
    24d4:	88 1f       	adc	r24, r24
    24d6:	99 0b       	sbc	r25, r25
    24d8:	00 0c       	add	r0, r0
    24da:	88 1f       	adc	r24, r24
    24dc:	99 1f       	adc	r25, r25
    24de:	98 2f       	mov	r25, r24
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	65 e0       	ldi	r22, 0x05	; 5
    24e4:	49 2f       	mov	r20, r25
    24e6:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    24ea:	fe 01       	movw	r30, r28
    24ec:	ed 59       	subi	r30, 0x9D	; 157
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	80 81       	ld	r24, Z
    24f2:	98 2f       	mov	r25, r24
    24f4:	99 1f       	adc	r25, r25
    24f6:	99 27       	eor	r25, r25
    24f8:	99 1f       	adc	r25, r25
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	66 e0       	ldi	r22, 0x06	; 6
    24fe:	49 2f       	mov	r20, r25
    2500:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
    2504:	fe 01       	movw	r30, r28
    2506:	ed 5b       	subi	r30, 0xBD	; 189
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	a0 e8       	ldi	r26, 0x80	; 128
    2510:	bf e3       	ldi	r27, 0x3F	; 63
    2512:	80 83       	st	Z, r24
    2514:	91 83       	std	Z+1, r25	; 0x01
    2516:	a2 83       	std	Z+2, r26	; 0x02
    2518:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    251a:	8e 01       	movw	r16, r28
    251c:	01 5c       	subi	r16, 0xC1	; 193
    251e:	1f 4f       	sbci	r17, 0xFF	; 255
    2520:	fe 01       	movw	r30, r28
    2522:	ed 5b       	subi	r30, 0xBD	; 189
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	60 81       	ld	r22, Z
    2528:	71 81       	ldd	r23, Z+1	; 0x01
    252a:	82 81       	ldd	r24, Z+2	; 0x02
    252c:	93 81       	ldd	r25, Z+3	; 0x03
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	4a e7       	ldi	r20, 0x7A	; 122
    2534:	55 e4       	ldi	r21, 0x45	; 69
    2536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	f8 01       	movw	r30, r16
    2540:	80 83       	st	Z, r24
    2542:	91 83       	std	Z+1, r25	; 0x01
    2544:	a2 83       	std	Z+2, r26	; 0x02
    2546:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2548:	fe 01       	movw	r30, r28
    254a:	ff 96       	adiw	r30, 0x3f	; 63
    254c:	60 81       	ld	r22, Z
    254e:	71 81       	ldd	r23, Z+1	; 0x01
    2550:	82 81       	ldd	r24, Z+2	; 0x02
    2552:	93 81       	ldd	r25, Z+3	; 0x03
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	40 e8       	ldi	r20, 0x80	; 128
    255a:	5f e3       	ldi	r21, 0x3F	; 63
    255c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2560:	88 23       	and	r24, r24
    2562:	2c f4       	brge	.+10     	; 0x256e <LCD_sendCommand+0x40e>
		__ticks = 1;
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	9e af       	std	Y+62, r25	; 0x3e
    256a:	8d af       	std	Y+61, r24	; 0x3d
    256c:	46 c0       	rjmp	.+140    	; 0x25fa <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    256e:	fe 01       	movw	r30, r28
    2570:	ff 96       	adiw	r30, 0x3f	; 63
    2572:	60 81       	ld	r22, Z
    2574:	71 81       	ldd	r23, Z+1	; 0x01
    2576:	82 81       	ldd	r24, Z+2	; 0x02
    2578:	93 81       	ldd	r25, Z+3	; 0x03
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	3f ef       	ldi	r19, 0xFF	; 255
    257e:	4f e7       	ldi	r20, 0x7F	; 127
    2580:	57 e4       	ldi	r21, 0x47	; 71
    2582:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2586:	18 16       	cp	r1, r24
    2588:	64 f5       	brge	.+88     	; 0x25e2 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    258a:	fe 01       	movw	r30, r28
    258c:	ed 5b       	subi	r30, 0xBD	; 189
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	60 81       	ld	r22, Z
    2592:	71 81       	ldd	r23, Z+1	; 0x01
    2594:	82 81       	ldd	r24, Z+2	; 0x02
    2596:	93 81       	ldd	r25, Z+3	; 0x03
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e2       	ldi	r20, 0x20	; 32
    259e:	51 e4       	ldi	r21, 0x41	; 65
    25a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	bc 01       	movw	r22, r24
    25aa:	cd 01       	movw	r24, r26
    25ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	9e af       	std	Y+62, r25	; 0x3e
    25b6:	8d af       	std	Y+61, r24	; 0x3d
    25b8:	0f c0       	rjmp	.+30     	; 0x25d8 <LCD_sendCommand+0x478>
    25ba:	80 e9       	ldi	r24, 0x90	; 144
    25bc:	91 e0       	ldi	r25, 0x01	; 1
    25be:	9c af       	std	Y+60, r25	; 0x3c
    25c0:	8b af       	std	Y+59, r24	; 0x3b
    25c2:	8b ad       	ldd	r24, Y+59	; 0x3b
    25c4:	9c ad       	ldd	r25, Y+60	; 0x3c
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	f1 f7       	brne	.-4      	; 0x25c6 <LCD_sendCommand+0x466>
    25ca:	9c af       	std	Y+60, r25	; 0x3c
    25cc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    25d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	9e af       	std	Y+62, r25	; 0x3e
    25d6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    25da:	9e ad       	ldd	r25, Y+62	; 0x3e
    25dc:	00 97       	sbiw	r24, 0x00	; 0
    25de:	69 f7       	brne	.-38     	; 0x25ba <LCD_sendCommand+0x45a>
    25e0:	16 c0       	rjmp	.+44     	; 0x260e <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e2:	fe 01       	movw	r30, r28
    25e4:	ff 96       	adiw	r30, 0x3f	; 63
    25e6:	60 81       	ld	r22, Z
    25e8:	71 81       	ldd	r23, Z+1	; 0x01
    25ea:	82 81       	ldd	r24, Z+2	; 0x02
    25ec:	93 81       	ldd	r25, Z+3	; 0x03
    25ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	9e af       	std	Y+62, r25	; 0x3e
    25f8:	8d af       	std	Y+61, r24	; 0x3d
    25fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    25fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    25fe:	9a af       	std	Y+58, r25	; 0x3a
    2600:	89 af       	std	Y+57, r24	; 0x39
    2602:	89 ad       	ldd	r24, Y+57	; 0x39
    2604:	9a ad       	ldd	r25, Y+58	; 0x3a
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	f1 f7       	brne	.-4      	; 0x2606 <LCD_sendCommand+0x4a6>
    260a:	9a af       	std	Y+58, r25	; 0x3a
    260c:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    260e:	80 e0       	ldi	r24, 0x00	; 0
    2610:	62 e0       	ldi	r22, 0x02	; 2
    2612:	40 e0       	ldi	r20, 0x00	; 0
    2614:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
    2618:	80 e0       	ldi	r24, 0x00	; 0
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	a0 e8       	ldi	r26, 0x80	; 128
    261e:	bf e3       	ldi	r27, 0x3F	; 63
    2620:	8d ab       	std	Y+53, r24	; 0x35
    2622:	9e ab       	std	Y+54, r25	; 0x36
    2624:	af ab       	std	Y+55, r26	; 0x37
    2626:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2628:	6d a9       	ldd	r22, Y+53	; 0x35
    262a:	7e a9       	ldd	r23, Y+54	; 0x36
    262c:	8f a9       	ldd	r24, Y+55	; 0x37
    262e:	98 ad       	ldd	r25, Y+56	; 0x38
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	4a e7       	ldi	r20, 0x7A	; 122
    2636:	55 e4       	ldi	r21, 0x45	; 69
    2638:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	89 ab       	std	Y+49, r24	; 0x31
    2642:	9a ab       	std	Y+50, r25	; 0x32
    2644:	ab ab       	std	Y+51, r26	; 0x33
    2646:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2648:	69 a9       	ldd	r22, Y+49	; 0x31
    264a:	7a a9       	ldd	r23, Y+50	; 0x32
    264c:	8b a9       	ldd	r24, Y+51	; 0x33
    264e:	9c a9       	ldd	r25, Y+52	; 0x34
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	40 e8       	ldi	r20, 0x80	; 128
    2656:	5f e3       	ldi	r21, 0x3F	; 63
    2658:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    265c:	88 23       	and	r24, r24
    265e:	2c f4       	brge	.+10     	; 0x266a <LCD_sendCommand+0x50a>
		__ticks = 1;
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	98 ab       	std	Y+48, r25	; 0x30
    2666:	8f a7       	std	Y+47, r24	; 0x2f
    2668:	3f c0       	rjmp	.+126    	; 0x26e8 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    266a:	69 a9       	ldd	r22, Y+49	; 0x31
    266c:	7a a9       	ldd	r23, Y+50	; 0x32
    266e:	8b a9       	ldd	r24, Y+51	; 0x33
    2670:	9c a9       	ldd	r25, Y+52	; 0x34
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	3f ef       	ldi	r19, 0xFF	; 255
    2676:	4f e7       	ldi	r20, 0x7F	; 127
    2678:	57 e4       	ldi	r21, 0x47	; 71
    267a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    267e:	18 16       	cp	r1, r24
    2680:	4c f5       	brge	.+82     	; 0x26d4 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2682:	6d a9       	ldd	r22, Y+53	; 0x35
    2684:	7e a9       	ldd	r23, Y+54	; 0x36
    2686:	8f a9       	ldd	r24, Y+55	; 0x37
    2688:	98 ad       	ldd	r25, Y+56	; 0x38
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	40 e2       	ldi	r20, 0x20	; 32
    2690:	51 e4       	ldi	r21, 0x41	; 65
    2692:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2696:	dc 01       	movw	r26, r24
    2698:	cb 01       	movw	r24, r22
    269a:	bc 01       	movw	r22, r24
    269c:	cd 01       	movw	r24, r26
    269e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	98 ab       	std	Y+48, r25	; 0x30
    26a8:	8f a7       	std	Y+47, r24	; 0x2f
    26aa:	0f c0       	rjmp	.+30     	; 0x26ca <LCD_sendCommand+0x56a>
    26ac:	80 e9       	ldi	r24, 0x90	; 144
    26ae:	91 e0       	ldi	r25, 0x01	; 1
    26b0:	9e a7       	std	Y+46, r25	; 0x2e
    26b2:	8d a7       	std	Y+45, r24	; 0x2d
    26b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    26b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    26b8:	01 97       	sbiw	r24, 0x01	; 1
    26ba:	f1 f7       	brne	.-4      	; 0x26b8 <LCD_sendCommand+0x558>
    26bc:	9e a7       	std	Y+46, r25	; 0x2e
    26be:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    26c2:	98 a9       	ldd	r25, Y+48	; 0x30
    26c4:	01 97       	sbiw	r24, 0x01	; 1
    26c6:	98 ab       	std	Y+48, r25	; 0x30
    26c8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    26cc:	98 a9       	ldd	r25, Y+48	; 0x30
    26ce:	00 97       	sbiw	r24, 0x00	; 0
    26d0:	69 f7       	brne	.-38     	; 0x26ac <LCD_sendCommand+0x54c>
    26d2:	14 c0       	rjmp	.+40     	; 0x26fc <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d4:	69 a9       	ldd	r22, Y+49	; 0x31
    26d6:	7a a9       	ldd	r23, Y+50	; 0x32
    26d8:	8b a9       	ldd	r24, Y+51	; 0x33
    26da:	9c a9       	ldd	r25, Y+52	; 0x34
    26dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	98 ab       	std	Y+48, r25	; 0x30
    26e6:	8f a7       	std	Y+47, r24	; 0x2f
    26e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    26ea:	98 a9       	ldd	r25, Y+48	; 0x30
    26ec:	9c a7       	std	Y+44, r25	; 0x2c
    26ee:	8b a7       	std	Y+43, r24	; 0x2b
    26f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    26f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    26f4:	01 97       	sbiw	r24, 0x01	; 1
    26f6:	f1 f7       	brne	.-4      	; 0x26f4 <LCD_sendCommand+0x594>
    26f8:	9c a7       	std	Y+44, r25	; 0x2c
    26fa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    26fc:	80 e0       	ldi	r24, 0x00	; 0
    26fe:	62 e0       	ldi	r22, 0x02	; 2
    2700:	41 e0       	ldi	r20, 0x01	; 1
    2702:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	a0 e8       	ldi	r26, 0x80	; 128
    270c:	bf e3       	ldi	r27, 0x3F	; 63
    270e:	8f a3       	std	Y+39, r24	; 0x27
    2710:	98 a7       	std	Y+40, r25	; 0x28
    2712:	a9 a7       	std	Y+41, r26	; 0x29
    2714:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2716:	6f a1       	ldd	r22, Y+39	; 0x27
    2718:	78 a5       	ldd	r23, Y+40	; 0x28
    271a:	89 a5       	ldd	r24, Y+41	; 0x29
    271c:	9a a5       	ldd	r25, Y+42	; 0x2a
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	4a e7       	ldi	r20, 0x7A	; 122
    2724:	55 e4       	ldi	r21, 0x45	; 69
    2726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	8b a3       	std	Y+35, r24	; 0x23
    2730:	9c a3       	std	Y+36, r25	; 0x24
    2732:	ad a3       	std	Y+37, r26	; 0x25
    2734:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2736:	6b a1       	ldd	r22, Y+35	; 0x23
    2738:	7c a1       	ldd	r23, Y+36	; 0x24
    273a:	8d a1       	ldd	r24, Y+37	; 0x25
    273c:	9e a1       	ldd	r25, Y+38	; 0x26
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	40 e8       	ldi	r20, 0x80	; 128
    2744:	5f e3       	ldi	r21, 0x3F	; 63
    2746:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    274a:	88 23       	and	r24, r24
    274c:	2c f4       	brge	.+10     	; 0x2758 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	9a a3       	std	Y+34, r25	; 0x22
    2754:	89 a3       	std	Y+33, r24	; 0x21
    2756:	3f c0       	rjmp	.+126    	; 0x27d6 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2758:	6b a1       	ldd	r22, Y+35	; 0x23
    275a:	7c a1       	ldd	r23, Y+36	; 0x24
    275c:	8d a1       	ldd	r24, Y+37	; 0x25
    275e:	9e a1       	ldd	r25, Y+38	; 0x26
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	3f ef       	ldi	r19, 0xFF	; 255
    2764:	4f e7       	ldi	r20, 0x7F	; 127
    2766:	57 e4       	ldi	r21, 0x47	; 71
    2768:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    276c:	18 16       	cp	r1, r24
    276e:	4c f5       	brge	.+82     	; 0x27c2 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2770:	6f a1       	ldd	r22, Y+39	; 0x27
    2772:	78 a5       	ldd	r23, Y+40	; 0x28
    2774:	89 a5       	ldd	r24, Y+41	; 0x29
    2776:	9a a5       	ldd	r25, Y+42	; 0x2a
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	40 e2       	ldi	r20, 0x20	; 32
    277e:	51 e4       	ldi	r21, 0x41	; 65
    2780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	bc 01       	movw	r22, r24
    278a:	cd 01       	movw	r24, r26
    278c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	9a a3       	std	Y+34, r25	; 0x22
    2796:	89 a3       	std	Y+33, r24	; 0x21
    2798:	0f c0       	rjmp	.+30     	; 0x27b8 <LCD_sendCommand+0x658>
    279a:	80 e9       	ldi	r24, 0x90	; 144
    279c:	91 e0       	ldi	r25, 0x01	; 1
    279e:	98 a3       	std	Y+32, r25	; 0x20
    27a0:	8f 8f       	std	Y+31, r24	; 0x1f
    27a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27a4:	98 a1       	ldd	r25, Y+32	; 0x20
    27a6:	01 97       	sbiw	r24, 0x01	; 1
    27a8:	f1 f7       	brne	.-4      	; 0x27a6 <LCD_sendCommand+0x646>
    27aa:	98 a3       	std	Y+32, r25	; 0x20
    27ac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ae:	89 a1       	ldd	r24, Y+33	; 0x21
    27b0:	9a a1       	ldd	r25, Y+34	; 0x22
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	9a a3       	std	Y+34, r25	; 0x22
    27b6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b8:	89 a1       	ldd	r24, Y+33	; 0x21
    27ba:	9a a1       	ldd	r25, Y+34	; 0x22
    27bc:	00 97       	sbiw	r24, 0x00	; 0
    27be:	69 f7       	brne	.-38     	; 0x279a <LCD_sendCommand+0x63a>
    27c0:	14 c0       	rjmp	.+40     	; 0x27ea <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c2:	6b a1       	ldd	r22, Y+35	; 0x23
    27c4:	7c a1       	ldd	r23, Y+36	; 0x24
    27c6:	8d a1       	ldd	r24, Y+37	; 0x25
    27c8:	9e a1       	ldd	r25, Y+38	; 0x26
    27ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	9a a3       	std	Y+34, r25	; 0x22
    27d4:	89 a3       	std	Y+33, r24	; 0x21
    27d6:	89 a1       	ldd	r24, Y+33	; 0x21
    27d8:	9a a1       	ldd	r25, Y+34	; 0x22
    27da:	9e 8f       	std	Y+30, r25	; 0x1e
    27dc:	8d 8f       	std	Y+29, r24	; 0x1d
    27de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	f1 f7       	brne	.-4      	; 0x27e2 <LCD_sendCommand+0x682>
    27e6:	9e 8f       	std	Y+30, r25	; 0x1e
    27e8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    27ea:	fe 01       	movw	r30, r28
    27ec:	ed 59       	subi	r30, 0x9D	; 157
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	80 81       	ld	r24, Z
    27f2:	98 2f       	mov	r25, r24
    27f4:	91 70       	andi	r25, 0x01	; 1
    27f6:	80 e0       	ldi	r24, 0x00	; 0
    27f8:	63 e0       	ldi	r22, 0x03	; 3
    27fa:	49 2f       	mov	r20, r25
    27fc:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2800:	fe 01       	movw	r30, r28
    2802:	ed 59       	subi	r30, 0x9D	; 157
    2804:	ff 4f       	sbci	r31, 0xFF	; 255
    2806:	80 81       	ld	r24, Z
    2808:	88 2f       	mov	r24, r24
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	82 70       	andi	r24, 0x02	; 2
    280e:	90 70       	andi	r25, 0x00	; 0
    2810:	95 95       	asr	r25
    2812:	87 95       	ror	r24
    2814:	98 2f       	mov	r25, r24
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	64 e0       	ldi	r22, 0x04	; 4
    281a:	49 2f       	mov	r20, r25
    281c:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2820:	fe 01       	movw	r30, r28
    2822:	ed 59       	subi	r30, 0x9D	; 157
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	80 81       	ld	r24, Z
    2828:	88 2f       	mov	r24, r24
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	84 70       	andi	r24, 0x04	; 4
    282e:	90 70       	andi	r25, 0x00	; 0
    2830:	95 95       	asr	r25
    2832:	87 95       	ror	r24
    2834:	95 95       	asr	r25
    2836:	87 95       	ror	r24
    2838:	98 2f       	mov	r25, r24
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	65 e0       	ldi	r22, 0x05	; 5
    283e:	49 2f       	mov	r20, r25
    2840:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2844:	fe 01       	movw	r30, r28
    2846:	ed 59       	subi	r30, 0x9D	; 157
    2848:	ff 4f       	sbci	r31, 0xFF	; 255
    284a:	80 81       	ld	r24, Z
    284c:	88 2f       	mov	r24, r24
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	88 70       	andi	r24, 0x08	; 8
    2852:	90 70       	andi	r25, 0x00	; 0
    2854:	95 95       	asr	r25
    2856:	87 95       	ror	r24
    2858:	95 95       	asr	r25
    285a:	87 95       	ror	r24
    285c:	95 95       	asr	r25
    285e:	87 95       	ror	r24
    2860:	98 2f       	mov	r25, r24
    2862:	80 e0       	ldi	r24, 0x00	; 0
    2864:	66 e0       	ldi	r22, 0x06	; 6
    2866:	49 2f       	mov	r20, r25
    2868:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	a0 e8       	ldi	r26, 0x80	; 128
    2872:	bf e3       	ldi	r27, 0x3F	; 63
    2874:	89 8f       	std	Y+25, r24	; 0x19
    2876:	9a 8f       	std	Y+26, r25	; 0x1a
    2878:	ab 8f       	std	Y+27, r26	; 0x1b
    287a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    287c:	69 8d       	ldd	r22, Y+25	; 0x19
    287e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2880:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2882:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	4a e7       	ldi	r20, 0x7A	; 122
    288a:	55 e4       	ldi	r21, 0x45	; 69
    288c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	8d 8b       	std	Y+21, r24	; 0x15
    2896:	9e 8b       	std	Y+22, r25	; 0x16
    2898:	af 8b       	std	Y+23, r26	; 0x17
    289a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    289c:	6d 89       	ldd	r22, Y+21	; 0x15
    289e:	7e 89       	ldd	r23, Y+22	; 0x16
    28a0:	8f 89       	ldd	r24, Y+23	; 0x17
    28a2:	98 8d       	ldd	r25, Y+24	; 0x18
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	40 e8       	ldi	r20, 0x80	; 128
    28aa:	5f e3       	ldi	r21, 0x3F	; 63
    28ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28b0:	88 23       	and	r24, r24
    28b2:	2c f4       	brge	.+10     	; 0x28be <LCD_sendCommand+0x75e>
		__ticks = 1;
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	9c 8b       	std	Y+20, r25	; 0x14
    28ba:	8b 8b       	std	Y+19, r24	; 0x13
    28bc:	3f c0       	rjmp	.+126    	; 0x293c <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    28be:	6d 89       	ldd	r22, Y+21	; 0x15
    28c0:	7e 89       	ldd	r23, Y+22	; 0x16
    28c2:	8f 89       	ldd	r24, Y+23	; 0x17
    28c4:	98 8d       	ldd	r25, Y+24	; 0x18
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	3f ef       	ldi	r19, 0xFF	; 255
    28ca:	4f e7       	ldi	r20, 0x7F	; 127
    28cc:	57 e4       	ldi	r21, 0x47	; 71
    28ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28d2:	18 16       	cp	r1, r24
    28d4:	4c f5       	brge	.+82     	; 0x2928 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d6:	69 8d       	ldd	r22, Y+25	; 0x19
    28d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	40 e2       	ldi	r20, 0x20	; 32
    28e4:	51 e4       	ldi	r21, 0x41	; 65
    28e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	bc 01       	movw	r22, r24
    28f0:	cd 01       	movw	r24, r26
    28f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	9c 8b       	std	Y+20, r25	; 0x14
    28fc:	8b 8b       	std	Y+19, r24	; 0x13
    28fe:	0f c0       	rjmp	.+30     	; 0x291e <LCD_sendCommand+0x7be>
    2900:	80 e9       	ldi	r24, 0x90	; 144
    2902:	91 e0       	ldi	r25, 0x01	; 1
    2904:	9a 8b       	std	Y+18, r25	; 0x12
    2906:	89 8b       	std	Y+17, r24	; 0x11
    2908:	89 89       	ldd	r24, Y+17	; 0x11
    290a:	9a 89       	ldd	r25, Y+18	; 0x12
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	f1 f7       	brne	.-4      	; 0x290c <LCD_sendCommand+0x7ac>
    2910:	9a 8b       	std	Y+18, r25	; 0x12
    2912:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2914:	8b 89       	ldd	r24, Y+19	; 0x13
    2916:	9c 89       	ldd	r25, Y+20	; 0x14
    2918:	01 97       	sbiw	r24, 0x01	; 1
    291a:	9c 8b       	std	Y+20, r25	; 0x14
    291c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    291e:	8b 89       	ldd	r24, Y+19	; 0x13
    2920:	9c 89       	ldd	r25, Y+20	; 0x14
    2922:	00 97       	sbiw	r24, 0x00	; 0
    2924:	69 f7       	brne	.-38     	; 0x2900 <LCD_sendCommand+0x7a0>
    2926:	14 c0       	rjmp	.+40     	; 0x2950 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2928:	6d 89       	ldd	r22, Y+21	; 0x15
    292a:	7e 89       	ldd	r23, Y+22	; 0x16
    292c:	8f 89       	ldd	r24, Y+23	; 0x17
    292e:	98 8d       	ldd	r25, Y+24	; 0x18
    2930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	9c 8b       	std	Y+20, r25	; 0x14
    293a:	8b 8b       	std	Y+19, r24	; 0x13
    293c:	8b 89       	ldd	r24, Y+19	; 0x13
    293e:	9c 89       	ldd	r25, Y+20	; 0x14
    2940:	98 8b       	std	Y+16, r25	; 0x10
    2942:	8f 87       	std	Y+15, r24	; 0x0f
    2944:	8f 85       	ldd	r24, Y+15	; 0x0f
    2946:	98 89       	ldd	r25, Y+16	; 0x10
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	f1 f7       	brne	.-4      	; 0x2948 <LCD_sendCommand+0x7e8>
    294c:	98 8b       	std	Y+16, r25	; 0x10
    294e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	62 e0       	ldi	r22, 0x02	; 2
    2954:	40 e0       	ldi	r20, 0x00	; 0
    2956:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	a0 e8       	ldi	r26, 0x80	; 128
    2960:	bf e3       	ldi	r27, 0x3F	; 63
    2962:	8b 87       	std	Y+11, r24	; 0x0b
    2964:	9c 87       	std	Y+12, r25	; 0x0c
    2966:	ad 87       	std	Y+13, r26	; 0x0d
    2968:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    296a:	6b 85       	ldd	r22, Y+11	; 0x0b
    296c:	7c 85       	ldd	r23, Y+12	; 0x0c
    296e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2970:	9e 85       	ldd	r25, Y+14	; 0x0e
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	4a e7       	ldi	r20, 0x7A	; 122
    2978:	55 e4       	ldi	r21, 0x45	; 69
    297a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	8f 83       	std	Y+7, r24	; 0x07
    2984:	98 87       	std	Y+8, r25	; 0x08
    2986:	a9 87       	std	Y+9, r26	; 0x09
    2988:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    298a:	6f 81       	ldd	r22, Y+7	; 0x07
    298c:	78 85       	ldd	r23, Y+8	; 0x08
    298e:	89 85       	ldd	r24, Y+9	; 0x09
    2990:	9a 85       	ldd	r25, Y+10	; 0x0a
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	40 e8       	ldi	r20, 0x80	; 128
    2998:	5f e3       	ldi	r21, 0x3F	; 63
    299a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    299e:	88 23       	and	r24, r24
    29a0:	2c f4       	brge	.+10     	; 0x29ac <LCD_sendCommand+0x84c>
		__ticks = 1;
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	9e 83       	std	Y+6, r25	; 0x06
    29a8:	8d 83       	std	Y+5, r24	; 0x05
    29aa:	3f c0       	rjmp	.+126    	; 0x2a2a <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    29ac:	6f 81       	ldd	r22, Y+7	; 0x07
    29ae:	78 85       	ldd	r23, Y+8	; 0x08
    29b0:	89 85       	ldd	r24, Y+9	; 0x09
    29b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	3f ef       	ldi	r19, 0xFF	; 255
    29b8:	4f e7       	ldi	r20, 0x7F	; 127
    29ba:	57 e4       	ldi	r21, 0x47	; 71
    29bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29c0:	18 16       	cp	r1, r24
    29c2:	4c f5       	brge	.+82     	; 0x2a16 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    29c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    29c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	40 e2       	ldi	r20, 0x20	; 32
    29d2:	51 e4       	ldi	r21, 0x41	; 65
    29d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	bc 01       	movw	r22, r24
    29de:	cd 01       	movw	r24, r26
    29e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e4:	dc 01       	movw	r26, r24
    29e6:	cb 01       	movw	r24, r22
    29e8:	9e 83       	std	Y+6, r25	; 0x06
    29ea:	8d 83       	std	Y+5, r24	; 0x05
    29ec:	0f c0       	rjmp	.+30     	; 0x2a0c <LCD_sendCommand+0x8ac>
    29ee:	80 e9       	ldi	r24, 0x90	; 144
    29f0:	91 e0       	ldi	r25, 0x01	; 1
    29f2:	9c 83       	std	Y+4, r25	; 0x04
    29f4:	8b 83       	std	Y+3, r24	; 0x03
    29f6:	8b 81       	ldd	r24, Y+3	; 0x03
    29f8:	9c 81       	ldd	r25, Y+4	; 0x04
    29fa:	01 97       	sbiw	r24, 0x01	; 1
    29fc:	f1 f7       	brne	.-4      	; 0x29fa <LCD_sendCommand+0x89a>
    29fe:	9c 83       	std	Y+4, r25	; 0x04
    2a00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a02:	8d 81       	ldd	r24, Y+5	; 0x05
    2a04:	9e 81       	ldd	r25, Y+6	; 0x06
    2a06:	01 97       	sbiw	r24, 0x01	; 1
    2a08:	9e 83       	std	Y+6, r25	; 0x06
    2a0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a10:	00 97       	sbiw	r24, 0x00	; 0
    2a12:	69 f7       	brne	.-38     	; 0x29ee <LCD_sendCommand+0x88e>
    2a14:	14 c0       	rjmp	.+40     	; 0x2a3e <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a16:	6f 81       	ldd	r22, Y+7	; 0x07
    2a18:	78 85       	ldd	r23, Y+8	; 0x08
    2a1a:	89 85       	ldd	r24, Y+9	; 0x09
    2a1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	9e 83       	std	Y+6, r25	; 0x06
    2a28:	8d 83       	std	Y+5, r24	; 0x05
    2a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a2e:	9a 83       	std	Y+2, r25	; 0x02
    2a30:	89 83       	std	Y+1, r24	; 0x01
    2a32:	89 81       	ldd	r24, Y+1	; 0x01
    2a34:	9a 81       	ldd	r25, Y+2	; 0x02
    2a36:	01 97       	sbiw	r24, 0x01	; 1
    2a38:	f1 f7       	brne	.-4      	; 0x2a36 <LCD_sendCommand+0x8d6>
    2a3a:	9a 83       	std	Y+2, r25	; 0x02
    2a3c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2a3e:	cd 59       	subi	r28, 0x9D	; 157
    2a40:	df 4f       	sbci	r29, 0xFF	; 255
    2a42:	0f b6       	in	r0, 0x3f	; 63
    2a44:	f8 94       	cli
    2a46:	de bf       	out	0x3e, r29	; 62
    2a48:	0f be       	out	0x3f, r0	; 63
    2a4a:	cd bf       	out	0x3d, r28	; 61
    2a4c:	cf 91       	pop	r28
    2a4e:	df 91       	pop	r29
    2a50:	1f 91       	pop	r17
    2a52:	0f 91       	pop	r16
    2a54:	08 95       	ret

00002a56 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2a56:	0f 93       	push	r16
    2a58:	1f 93       	push	r17
    2a5a:	df 93       	push	r29
    2a5c:	cf 93       	push	r28
    2a5e:	cd b7       	in	r28, 0x3d	; 61
    2a60:	de b7       	in	r29, 0x3e	; 62
    2a62:	c3 56       	subi	r28, 0x63	; 99
    2a64:	d0 40       	sbci	r29, 0x00	; 0
    2a66:	0f b6       	in	r0, 0x3f	; 63
    2a68:	f8 94       	cli
    2a6a:	de bf       	out	0x3e, r29	; 62
    2a6c:	0f be       	out	0x3f, r0	; 63
    2a6e:	cd bf       	out	0x3d, r28	; 61
    2a70:	fe 01       	movw	r30, r28
    2a72:	ed 59       	subi	r30, 0x9D	; 157
    2a74:	ff 4f       	sbci	r31, 0xFF	; 255
    2a76:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	61 e0       	ldi	r22, 0x01	; 1
    2a7c:	41 e0       	ldi	r20, 0x01	; 1
    2a7e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
    2a82:	fe 01       	movw	r30, r28
    2a84:	e1 5a       	subi	r30, 0xA1	; 161
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	80 e0       	ldi	r24, 0x00	; 0
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	a0 e8       	ldi	r26, 0x80	; 128
    2a8e:	bf e3       	ldi	r27, 0x3F	; 63
    2a90:	80 83       	st	Z, r24
    2a92:	91 83       	std	Z+1, r25	; 0x01
    2a94:	a2 83       	std	Z+2, r26	; 0x02
    2a96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a98:	8e 01       	movw	r16, r28
    2a9a:	05 5a       	subi	r16, 0xA5	; 165
    2a9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	e1 5a       	subi	r30, 0xA1	; 161
    2aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa4:	60 81       	ld	r22, Z
    2aa6:	71 81       	ldd	r23, Z+1	; 0x01
    2aa8:	82 81       	ldd	r24, Z+2	; 0x02
    2aaa:	93 81       	ldd	r25, Z+3	; 0x03
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	4a e7       	ldi	r20, 0x7A	; 122
    2ab2:	55 e4       	ldi	r21, 0x45	; 69
    2ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	f8 01       	movw	r30, r16
    2abe:	80 83       	st	Z, r24
    2ac0:	91 83       	std	Z+1, r25	; 0x01
    2ac2:	a2 83       	std	Z+2, r26	; 0x02
    2ac4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	e5 5a       	subi	r30, 0xA5	; 165
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	60 81       	ld	r22, Z
    2ace:	71 81       	ldd	r23, Z+1	; 0x01
    2ad0:	82 81       	ldd	r24, Z+2	; 0x02
    2ad2:	93 81       	ldd	r25, Z+3	; 0x03
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	40 e8       	ldi	r20, 0x80	; 128
    2ada:	5f e3       	ldi	r21, 0x3F	; 63
    2adc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ae0:	88 23       	and	r24, r24
    2ae2:	44 f4       	brge	.+16     	; 0x2af4 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2ae4:	fe 01       	movw	r30, r28
    2ae6:	e7 5a       	subi	r30, 0xA7	; 167
    2ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aea:	81 e0       	ldi	r24, 0x01	; 1
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	91 83       	std	Z+1, r25	; 0x01
    2af0:	80 83       	st	Z, r24
    2af2:	64 c0       	rjmp	.+200    	; 0x2bbc <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2af4:	fe 01       	movw	r30, r28
    2af6:	e5 5a       	subi	r30, 0xA5	; 165
    2af8:	ff 4f       	sbci	r31, 0xFF	; 255
    2afa:	60 81       	ld	r22, Z
    2afc:	71 81       	ldd	r23, Z+1	; 0x01
    2afe:	82 81       	ldd	r24, Z+2	; 0x02
    2b00:	93 81       	ldd	r25, Z+3	; 0x03
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	3f ef       	ldi	r19, 0xFF	; 255
    2b06:	4f e7       	ldi	r20, 0x7F	; 127
    2b08:	57 e4       	ldi	r21, 0x47	; 71
    2b0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b0e:	18 16       	cp	r1, r24
    2b10:	0c f0       	brlt	.+2      	; 0x2b14 <LCD_displayCharacter+0xbe>
    2b12:	43 c0       	rjmp	.+134    	; 0x2b9a <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b14:	fe 01       	movw	r30, r28
    2b16:	e1 5a       	subi	r30, 0xA1	; 161
    2b18:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1a:	60 81       	ld	r22, Z
    2b1c:	71 81       	ldd	r23, Z+1	; 0x01
    2b1e:	82 81       	ldd	r24, Z+2	; 0x02
    2b20:	93 81       	ldd	r25, Z+3	; 0x03
    2b22:	20 e0       	ldi	r18, 0x00	; 0
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	40 e2       	ldi	r20, 0x20	; 32
    2b28:	51 e4       	ldi	r21, 0x41	; 65
    2b2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2e:	dc 01       	movw	r26, r24
    2b30:	cb 01       	movw	r24, r22
    2b32:	8e 01       	movw	r16, r28
    2b34:	07 5a       	subi	r16, 0xA7	; 167
    2b36:	1f 4f       	sbci	r17, 0xFF	; 255
    2b38:	bc 01       	movw	r22, r24
    2b3a:	cd 01       	movw	r24, r26
    2b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	f8 01       	movw	r30, r16
    2b46:	91 83       	std	Z+1, r25	; 0x01
    2b48:	80 83       	st	Z, r24
    2b4a:	1f c0       	rjmp	.+62     	; 0x2b8a <LCD_displayCharacter+0x134>
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	e9 5a       	subi	r30, 0xA9	; 169
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	80 e9       	ldi	r24, 0x90	; 144
    2b54:	91 e0       	ldi	r25, 0x01	; 1
    2b56:	91 83       	std	Z+1, r25	; 0x01
    2b58:	80 83       	st	Z, r24
    2b5a:	fe 01       	movw	r30, r28
    2b5c:	e9 5a       	subi	r30, 0xA9	; 169
    2b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b60:	80 81       	ld	r24, Z
    2b62:	91 81       	ldd	r25, Z+1	; 0x01
    2b64:	01 97       	sbiw	r24, 0x01	; 1
    2b66:	f1 f7       	brne	.-4      	; 0x2b64 <LCD_displayCharacter+0x10e>
    2b68:	fe 01       	movw	r30, r28
    2b6a:	e9 5a       	subi	r30, 0xA9	; 169
    2b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6e:	91 83       	std	Z+1, r25	; 0x01
    2b70:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b72:	de 01       	movw	r26, r28
    2b74:	a7 5a       	subi	r26, 0xA7	; 167
    2b76:	bf 4f       	sbci	r27, 0xFF	; 255
    2b78:	fe 01       	movw	r30, r28
    2b7a:	e7 5a       	subi	r30, 0xA7	; 167
    2b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7e:	80 81       	ld	r24, Z
    2b80:	91 81       	ldd	r25, Z+1	; 0x01
    2b82:	01 97       	sbiw	r24, 0x01	; 1
    2b84:	11 96       	adiw	r26, 0x01	; 1
    2b86:	9c 93       	st	X, r25
    2b88:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	e7 5a       	subi	r30, 0xA7	; 167
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	80 81       	ld	r24, Z
    2b92:	91 81       	ldd	r25, Z+1	; 0x01
    2b94:	00 97       	sbiw	r24, 0x00	; 0
    2b96:	d1 f6       	brne	.-76     	; 0x2b4c <LCD_displayCharacter+0xf6>
    2b98:	27 c0       	rjmp	.+78     	; 0x2be8 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b9a:	8e 01       	movw	r16, r28
    2b9c:	07 5a       	subi	r16, 0xA7	; 167
    2b9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	e5 5a       	subi	r30, 0xA5	; 165
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	60 81       	ld	r22, Z
    2ba8:	71 81       	ldd	r23, Z+1	; 0x01
    2baa:	82 81       	ldd	r24, Z+2	; 0x02
    2bac:	93 81       	ldd	r25, Z+3	; 0x03
    2bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	f8 01       	movw	r30, r16
    2bb8:	91 83       	std	Z+1, r25	; 0x01
    2bba:	80 83       	st	Z, r24
    2bbc:	de 01       	movw	r26, r28
    2bbe:	ab 5a       	subi	r26, 0xAB	; 171
    2bc0:	bf 4f       	sbci	r27, 0xFF	; 255
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	e7 5a       	subi	r30, 0xA7	; 167
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	80 81       	ld	r24, Z
    2bca:	91 81       	ldd	r25, Z+1	; 0x01
    2bcc:	8d 93       	st	X+, r24
    2bce:	9c 93       	st	X, r25
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	eb 5a       	subi	r30, 0xAB	; 171
    2bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd6:	80 81       	ld	r24, Z
    2bd8:	91 81       	ldd	r25, Z+1	; 0x01
    2bda:	01 97       	sbiw	r24, 0x01	; 1
    2bdc:	f1 f7       	brne	.-4      	; 0x2bda <LCD_displayCharacter+0x184>
    2bde:	fe 01       	movw	r30, r28
    2be0:	eb 5a       	subi	r30, 0xAB	; 171
    2be2:	ff 4f       	sbci	r31, 0xFF	; 255
    2be4:	91 83       	std	Z+1, r25	; 0x01
    2be6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2be8:	80 e0       	ldi	r24, 0x00	; 0
    2bea:	62 e0       	ldi	r22, 0x02	; 2
    2bec:	41 e0       	ldi	r20, 0x01	; 1
    2bee:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	ef 5a       	subi	r30, 0xAF	; 175
    2bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	a0 e8       	ldi	r26, 0x80	; 128
    2bfe:	bf e3       	ldi	r27, 0x3F	; 63
    2c00:	80 83       	st	Z, r24
    2c02:	91 83       	std	Z+1, r25	; 0x01
    2c04:	a2 83       	std	Z+2, r26	; 0x02
    2c06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c08:	8e 01       	movw	r16, r28
    2c0a:	03 5b       	subi	r16, 0xB3	; 179
    2c0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c0e:	fe 01       	movw	r30, r28
    2c10:	ef 5a       	subi	r30, 0xAF	; 175
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	60 81       	ld	r22, Z
    2c16:	71 81       	ldd	r23, Z+1	; 0x01
    2c18:	82 81       	ldd	r24, Z+2	; 0x02
    2c1a:	93 81       	ldd	r25, Z+3	; 0x03
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	4a e7       	ldi	r20, 0x7A	; 122
    2c22:	55 e4       	ldi	r21, 0x45	; 69
    2c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c28:	dc 01       	movw	r26, r24
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	f8 01       	movw	r30, r16
    2c2e:	80 83       	st	Z, r24
    2c30:	91 83       	std	Z+1, r25	; 0x01
    2c32:	a2 83       	std	Z+2, r26	; 0x02
    2c34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c36:	fe 01       	movw	r30, r28
    2c38:	e3 5b       	subi	r30, 0xB3	; 179
    2c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3c:	60 81       	ld	r22, Z
    2c3e:	71 81       	ldd	r23, Z+1	; 0x01
    2c40:	82 81       	ldd	r24, Z+2	; 0x02
    2c42:	93 81       	ldd	r25, Z+3	; 0x03
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	40 e8       	ldi	r20, 0x80	; 128
    2c4a:	5f e3       	ldi	r21, 0x3F	; 63
    2c4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c50:	88 23       	and	r24, r24
    2c52:	44 f4       	brge	.+16     	; 0x2c64 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2c54:	fe 01       	movw	r30, r28
    2c56:	e5 5b       	subi	r30, 0xB5	; 181
    2c58:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	91 83       	std	Z+1, r25	; 0x01
    2c60:	80 83       	st	Z, r24
    2c62:	64 c0       	rjmp	.+200    	; 0x2d2c <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2c64:	fe 01       	movw	r30, r28
    2c66:	e3 5b       	subi	r30, 0xB3	; 179
    2c68:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6a:	60 81       	ld	r22, Z
    2c6c:	71 81       	ldd	r23, Z+1	; 0x01
    2c6e:	82 81       	ldd	r24, Z+2	; 0x02
    2c70:	93 81       	ldd	r25, Z+3	; 0x03
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	3f ef       	ldi	r19, 0xFF	; 255
    2c76:	4f e7       	ldi	r20, 0x7F	; 127
    2c78:	57 e4       	ldi	r21, 0x47	; 71
    2c7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c7e:	18 16       	cp	r1, r24
    2c80:	0c f0       	brlt	.+2      	; 0x2c84 <LCD_displayCharacter+0x22e>
    2c82:	43 c0       	rjmp	.+134    	; 0x2d0a <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c84:	fe 01       	movw	r30, r28
    2c86:	ef 5a       	subi	r30, 0xAF	; 175
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	60 81       	ld	r22, Z
    2c8c:	71 81       	ldd	r23, Z+1	; 0x01
    2c8e:	82 81       	ldd	r24, Z+2	; 0x02
    2c90:	93 81       	ldd	r25, Z+3	; 0x03
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	40 e2       	ldi	r20, 0x20	; 32
    2c98:	51 e4       	ldi	r21, 0x41	; 65
    2c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	8e 01       	movw	r16, r28
    2ca4:	05 5b       	subi	r16, 0xB5	; 181
    2ca6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ca8:	bc 01       	movw	r22, r24
    2caa:	cd 01       	movw	r24, r26
    2cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	f8 01       	movw	r30, r16
    2cb6:	91 83       	std	Z+1, r25	; 0x01
    2cb8:	80 83       	st	Z, r24
    2cba:	1f c0       	rjmp	.+62     	; 0x2cfa <LCD_displayCharacter+0x2a4>
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	e7 5b       	subi	r30, 0xB7	; 183
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	80 e9       	ldi	r24, 0x90	; 144
    2cc4:	91 e0       	ldi	r25, 0x01	; 1
    2cc6:	91 83       	std	Z+1, r25	; 0x01
    2cc8:	80 83       	st	Z, r24
    2cca:	fe 01       	movw	r30, r28
    2ccc:	e7 5b       	subi	r30, 0xB7	; 183
    2cce:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd0:	80 81       	ld	r24, Z
    2cd2:	91 81       	ldd	r25, Z+1	; 0x01
    2cd4:	01 97       	sbiw	r24, 0x01	; 1
    2cd6:	f1 f7       	brne	.-4      	; 0x2cd4 <LCD_displayCharacter+0x27e>
    2cd8:	fe 01       	movw	r30, r28
    2cda:	e7 5b       	subi	r30, 0xB7	; 183
    2cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cde:	91 83       	std	Z+1, r25	; 0x01
    2ce0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce2:	de 01       	movw	r26, r28
    2ce4:	a5 5b       	subi	r26, 0xB5	; 181
    2ce6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ce8:	fe 01       	movw	r30, r28
    2cea:	e5 5b       	subi	r30, 0xB5	; 181
    2cec:	ff 4f       	sbci	r31, 0xFF	; 255
    2cee:	80 81       	ld	r24, Z
    2cf0:	91 81       	ldd	r25, Z+1	; 0x01
    2cf2:	01 97       	sbiw	r24, 0x01	; 1
    2cf4:	11 96       	adiw	r26, 0x01	; 1
    2cf6:	9c 93       	st	X, r25
    2cf8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	e5 5b       	subi	r30, 0xB5	; 181
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	80 81       	ld	r24, Z
    2d02:	91 81       	ldd	r25, Z+1	; 0x01
    2d04:	00 97       	sbiw	r24, 0x00	; 0
    2d06:	d1 f6       	brne	.-76     	; 0x2cbc <LCD_displayCharacter+0x266>
    2d08:	27 c0       	rjmp	.+78     	; 0x2d58 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d0a:	8e 01       	movw	r16, r28
    2d0c:	05 5b       	subi	r16, 0xB5	; 181
    2d0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d10:	fe 01       	movw	r30, r28
    2d12:	e3 5b       	subi	r30, 0xB3	; 179
    2d14:	ff 4f       	sbci	r31, 0xFF	; 255
    2d16:	60 81       	ld	r22, Z
    2d18:	71 81       	ldd	r23, Z+1	; 0x01
    2d1a:	82 81       	ldd	r24, Z+2	; 0x02
    2d1c:	93 81       	ldd	r25, Z+3	; 0x03
    2d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	f8 01       	movw	r30, r16
    2d28:	91 83       	std	Z+1, r25	; 0x01
    2d2a:	80 83       	st	Z, r24
    2d2c:	de 01       	movw	r26, r28
    2d2e:	a9 5b       	subi	r26, 0xB9	; 185
    2d30:	bf 4f       	sbci	r27, 0xFF	; 255
    2d32:	fe 01       	movw	r30, r28
    2d34:	e5 5b       	subi	r30, 0xB5	; 181
    2d36:	ff 4f       	sbci	r31, 0xFF	; 255
    2d38:	80 81       	ld	r24, Z
    2d3a:	91 81       	ldd	r25, Z+1	; 0x01
    2d3c:	8d 93       	st	X+, r24
    2d3e:	9c 93       	st	X, r25
    2d40:	fe 01       	movw	r30, r28
    2d42:	e9 5b       	subi	r30, 0xB9	; 185
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	80 81       	ld	r24, Z
    2d48:	91 81       	ldd	r25, Z+1	; 0x01
    2d4a:	01 97       	sbiw	r24, 0x01	; 1
    2d4c:	f1 f7       	brne	.-4      	; 0x2d4a <LCD_displayCharacter+0x2f4>
    2d4e:	fe 01       	movw	r30, r28
    2d50:	e9 5b       	subi	r30, 0xB9	; 185
    2d52:	ff 4f       	sbci	r31, 0xFF	; 255
    2d54:	91 83       	std	Z+1, r25	; 0x01
    2d56:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2d58:	fe 01       	movw	r30, r28
    2d5a:	ed 59       	subi	r30, 0x9D	; 157
    2d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5e:	80 81       	ld	r24, Z
    2d60:	88 2f       	mov	r24, r24
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	80 71       	andi	r24, 0x10	; 16
    2d66:	90 70       	andi	r25, 0x00	; 0
    2d68:	95 95       	asr	r25
    2d6a:	87 95       	ror	r24
    2d6c:	95 95       	asr	r25
    2d6e:	87 95       	ror	r24
    2d70:	95 95       	asr	r25
    2d72:	87 95       	ror	r24
    2d74:	95 95       	asr	r25
    2d76:	87 95       	ror	r24
    2d78:	98 2f       	mov	r25, r24
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
    2d7c:	63 e0       	ldi	r22, 0x03	; 3
    2d7e:	49 2f       	mov	r20, r25
    2d80:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2d84:	fe 01       	movw	r30, r28
    2d86:	ed 59       	subi	r30, 0x9D	; 157
    2d88:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8a:	80 81       	ld	r24, Z
    2d8c:	88 2f       	mov	r24, r24
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	80 72       	andi	r24, 0x20	; 32
    2d92:	90 70       	andi	r25, 0x00	; 0
    2d94:	95 95       	asr	r25
    2d96:	87 95       	ror	r24
    2d98:	95 95       	asr	r25
    2d9a:	87 95       	ror	r24
    2d9c:	95 95       	asr	r25
    2d9e:	87 95       	ror	r24
    2da0:	95 95       	asr	r25
    2da2:	87 95       	ror	r24
    2da4:	95 95       	asr	r25
    2da6:	87 95       	ror	r24
    2da8:	98 2f       	mov	r25, r24
    2daa:	80 e0       	ldi	r24, 0x00	; 0
    2dac:	64 e0       	ldi	r22, 0x04	; 4
    2dae:	49 2f       	mov	r20, r25
    2db0:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2db4:	fe 01       	movw	r30, r28
    2db6:	ed 59       	subi	r30, 0x9D	; 157
    2db8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dba:	80 81       	ld	r24, Z
    2dbc:	88 2f       	mov	r24, r24
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	80 74       	andi	r24, 0x40	; 64
    2dc2:	90 70       	andi	r25, 0x00	; 0
    2dc4:	08 2e       	mov	r0, r24
    2dc6:	89 2f       	mov	r24, r25
    2dc8:	00 0c       	add	r0, r0
    2dca:	88 1f       	adc	r24, r24
    2dcc:	99 0b       	sbc	r25, r25
    2dce:	00 0c       	add	r0, r0
    2dd0:	88 1f       	adc	r24, r24
    2dd2:	99 1f       	adc	r25, r25
    2dd4:	98 2f       	mov	r25, r24
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	65 e0       	ldi	r22, 0x05	; 5
    2dda:	49 2f       	mov	r20, r25
    2ddc:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2de0:	fe 01       	movw	r30, r28
    2de2:	ed 59       	subi	r30, 0x9D	; 157
    2de4:	ff 4f       	sbci	r31, 0xFF	; 255
    2de6:	80 81       	ld	r24, Z
    2de8:	98 2f       	mov	r25, r24
    2dea:	99 1f       	adc	r25, r25
    2dec:	99 27       	eor	r25, r25
    2dee:	99 1f       	adc	r25, r25
    2df0:	80 e0       	ldi	r24, 0x00	; 0
    2df2:	66 e0       	ldi	r22, 0x06	; 6
    2df4:	49 2f       	mov	r20, r25
    2df6:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
    2dfa:	fe 01       	movw	r30, r28
    2dfc:	ed 5b       	subi	r30, 0xBD	; 189
    2dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2e00:	80 e0       	ldi	r24, 0x00	; 0
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	a0 e8       	ldi	r26, 0x80	; 128
    2e06:	bf e3       	ldi	r27, 0x3F	; 63
    2e08:	80 83       	st	Z, r24
    2e0a:	91 83       	std	Z+1, r25	; 0x01
    2e0c:	a2 83       	std	Z+2, r26	; 0x02
    2e0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e10:	8e 01       	movw	r16, r28
    2e12:	01 5c       	subi	r16, 0xC1	; 193
    2e14:	1f 4f       	sbci	r17, 0xFF	; 255
    2e16:	fe 01       	movw	r30, r28
    2e18:	ed 5b       	subi	r30, 0xBD	; 189
    2e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1c:	60 81       	ld	r22, Z
    2e1e:	71 81       	ldd	r23, Z+1	; 0x01
    2e20:	82 81       	ldd	r24, Z+2	; 0x02
    2e22:	93 81       	ldd	r25, Z+3	; 0x03
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	4a e7       	ldi	r20, 0x7A	; 122
    2e2a:	55 e4       	ldi	r21, 0x45	; 69
    2e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	f8 01       	movw	r30, r16
    2e36:	80 83       	st	Z, r24
    2e38:	91 83       	std	Z+1, r25	; 0x01
    2e3a:	a2 83       	std	Z+2, r26	; 0x02
    2e3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e3e:	fe 01       	movw	r30, r28
    2e40:	ff 96       	adiw	r30, 0x3f	; 63
    2e42:	60 81       	ld	r22, Z
    2e44:	71 81       	ldd	r23, Z+1	; 0x01
    2e46:	82 81       	ldd	r24, Z+2	; 0x02
    2e48:	93 81       	ldd	r25, Z+3	; 0x03
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	40 e8       	ldi	r20, 0x80	; 128
    2e50:	5f e3       	ldi	r21, 0x3F	; 63
    2e52:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e56:	88 23       	and	r24, r24
    2e58:	2c f4       	brge	.+10     	; 0x2e64 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	9e af       	std	Y+62, r25	; 0x3e
    2e60:	8d af       	std	Y+61, r24	; 0x3d
    2e62:	46 c0       	rjmp	.+140    	; 0x2ef0 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2e64:	fe 01       	movw	r30, r28
    2e66:	ff 96       	adiw	r30, 0x3f	; 63
    2e68:	60 81       	ld	r22, Z
    2e6a:	71 81       	ldd	r23, Z+1	; 0x01
    2e6c:	82 81       	ldd	r24, Z+2	; 0x02
    2e6e:	93 81       	ldd	r25, Z+3	; 0x03
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	3f ef       	ldi	r19, 0xFF	; 255
    2e74:	4f e7       	ldi	r20, 0x7F	; 127
    2e76:	57 e4       	ldi	r21, 0x47	; 71
    2e78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e7c:	18 16       	cp	r1, r24
    2e7e:	64 f5       	brge	.+88     	; 0x2ed8 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e80:	fe 01       	movw	r30, r28
    2e82:	ed 5b       	subi	r30, 0xBD	; 189
    2e84:	ff 4f       	sbci	r31, 0xFF	; 255
    2e86:	60 81       	ld	r22, Z
    2e88:	71 81       	ldd	r23, Z+1	; 0x01
    2e8a:	82 81       	ldd	r24, Z+2	; 0x02
    2e8c:	93 81       	ldd	r25, Z+3	; 0x03
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	40 e2       	ldi	r20, 0x20	; 32
    2e94:	51 e4       	ldi	r21, 0x41	; 65
    2e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	bc 01       	movw	r22, r24
    2ea0:	cd 01       	movw	r24, r26
    2ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	9e af       	std	Y+62, r25	; 0x3e
    2eac:	8d af       	std	Y+61, r24	; 0x3d
    2eae:	0f c0       	rjmp	.+30     	; 0x2ece <LCD_displayCharacter+0x478>
    2eb0:	80 e9       	ldi	r24, 0x90	; 144
    2eb2:	91 e0       	ldi	r25, 0x01	; 1
    2eb4:	9c af       	std	Y+60, r25	; 0x3c
    2eb6:	8b af       	std	Y+59, r24	; 0x3b
    2eb8:	8b ad       	ldd	r24, Y+59	; 0x3b
    2eba:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	f1 f7       	brne	.-4      	; 0x2ebc <LCD_displayCharacter+0x466>
    2ec0:	9c af       	std	Y+60, r25	; 0x3c
    2ec2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ec6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	9e af       	std	Y+62, r25	; 0x3e
    2ecc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ece:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ed0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ed2:	00 97       	sbiw	r24, 0x00	; 0
    2ed4:	69 f7       	brne	.-38     	; 0x2eb0 <LCD_displayCharacter+0x45a>
    2ed6:	16 c0       	rjmp	.+44     	; 0x2f04 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ed8:	fe 01       	movw	r30, r28
    2eda:	ff 96       	adiw	r30, 0x3f	; 63
    2edc:	60 81       	ld	r22, Z
    2ede:	71 81       	ldd	r23, Z+1	; 0x01
    2ee0:	82 81       	ldd	r24, Z+2	; 0x02
    2ee2:	93 81       	ldd	r25, Z+3	; 0x03
    2ee4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	9e af       	std	Y+62, r25	; 0x3e
    2eee:	8d af       	std	Y+61, r24	; 0x3d
    2ef0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ef2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ef4:	9a af       	std	Y+58, r25	; 0x3a
    2ef6:	89 af       	std	Y+57, r24	; 0x39
    2ef8:	89 ad       	ldd	r24, Y+57	; 0x39
    2efa:	9a ad       	ldd	r25, Y+58	; 0x3a
    2efc:	01 97       	sbiw	r24, 0x01	; 1
    2efe:	f1 f7       	brne	.-4      	; 0x2efc <LCD_displayCharacter+0x4a6>
    2f00:	9a af       	std	Y+58, r25	; 0x3a
    2f02:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2f04:	80 e0       	ldi	r24, 0x00	; 0
    2f06:	62 e0       	ldi	r22, 0x02	; 2
    2f08:	40 e0       	ldi	r20, 0x00	; 0
    2f0a:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
    2f0e:	80 e0       	ldi	r24, 0x00	; 0
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	a0 e8       	ldi	r26, 0x80	; 128
    2f14:	bf e3       	ldi	r27, 0x3F	; 63
    2f16:	8d ab       	std	Y+53, r24	; 0x35
    2f18:	9e ab       	std	Y+54, r25	; 0x36
    2f1a:	af ab       	std	Y+55, r26	; 0x37
    2f1c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f1e:	6d a9       	ldd	r22, Y+53	; 0x35
    2f20:	7e a9       	ldd	r23, Y+54	; 0x36
    2f22:	8f a9       	ldd	r24, Y+55	; 0x37
    2f24:	98 ad       	ldd	r25, Y+56	; 0x38
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	4a e7       	ldi	r20, 0x7A	; 122
    2f2c:	55 e4       	ldi	r21, 0x45	; 69
    2f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f32:	dc 01       	movw	r26, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	89 ab       	std	Y+49, r24	; 0x31
    2f38:	9a ab       	std	Y+50, r25	; 0x32
    2f3a:	ab ab       	std	Y+51, r26	; 0x33
    2f3c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f3e:	69 a9       	ldd	r22, Y+49	; 0x31
    2f40:	7a a9       	ldd	r23, Y+50	; 0x32
    2f42:	8b a9       	ldd	r24, Y+51	; 0x33
    2f44:	9c a9       	ldd	r25, Y+52	; 0x34
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	40 e8       	ldi	r20, 0x80	; 128
    2f4c:	5f e3       	ldi	r21, 0x3F	; 63
    2f4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f52:	88 23       	and	r24, r24
    2f54:	2c f4       	brge	.+10     	; 0x2f60 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2f56:	81 e0       	ldi	r24, 0x01	; 1
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	98 ab       	std	Y+48, r25	; 0x30
    2f5c:	8f a7       	std	Y+47, r24	; 0x2f
    2f5e:	3f c0       	rjmp	.+126    	; 0x2fde <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2f60:	69 a9       	ldd	r22, Y+49	; 0x31
    2f62:	7a a9       	ldd	r23, Y+50	; 0x32
    2f64:	8b a9       	ldd	r24, Y+51	; 0x33
    2f66:	9c a9       	ldd	r25, Y+52	; 0x34
    2f68:	20 e0       	ldi	r18, 0x00	; 0
    2f6a:	3f ef       	ldi	r19, 0xFF	; 255
    2f6c:	4f e7       	ldi	r20, 0x7F	; 127
    2f6e:	57 e4       	ldi	r21, 0x47	; 71
    2f70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f74:	18 16       	cp	r1, r24
    2f76:	4c f5       	brge	.+82     	; 0x2fca <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f78:	6d a9       	ldd	r22, Y+53	; 0x35
    2f7a:	7e a9       	ldd	r23, Y+54	; 0x36
    2f7c:	8f a9       	ldd	r24, Y+55	; 0x37
    2f7e:	98 ad       	ldd	r25, Y+56	; 0x38
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	40 e2       	ldi	r20, 0x20	; 32
    2f86:	51 e4       	ldi	r21, 0x41	; 65
    2f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	bc 01       	movw	r22, r24
    2f92:	cd 01       	movw	r24, r26
    2f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	98 ab       	std	Y+48, r25	; 0x30
    2f9e:	8f a7       	std	Y+47, r24	; 0x2f
    2fa0:	0f c0       	rjmp	.+30     	; 0x2fc0 <LCD_displayCharacter+0x56a>
    2fa2:	80 e9       	ldi	r24, 0x90	; 144
    2fa4:	91 e0       	ldi	r25, 0x01	; 1
    2fa6:	9e a7       	std	Y+46, r25	; 0x2e
    2fa8:	8d a7       	std	Y+45, r24	; 0x2d
    2faa:	8d a5       	ldd	r24, Y+45	; 0x2d
    2fac:	9e a5       	ldd	r25, Y+46	; 0x2e
    2fae:	01 97       	sbiw	r24, 0x01	; 1
    2fb0:	f1 f7       	brne	.-4      	; 0x2fae <LCD_displayCharacter+0x558>
    2fb2:	9e a7       	std	Y+46, r25	; 0x2e
    2fb4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fb8:	98 a9       	ldd	r25, Y+48	; 0x30
    2fba:	01 97       	sbiw	r24, 0x01	; 1
    2fbc:	98 ab       	std	Y+48, r25	; 0x30
    2fbe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fc2:	98 a9       	ldd	r25, Y+48	; 0x30
    2fc4:	00 97       	sbiw	r24, 0x00	; 0
    2fc6:	69 f7       	brne	.-38     	; 0x2fa2 <LCD_displayCharacter+0x54c>
    2fc8:	14 c0       	rjmp	.+40     	; 0x2ff2 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fca:	69 a9       	ldd	r22, Y+49	; 0x31
    2fcc:	7a a9       	ldd	r23, Y+50	; 0x32
    2fce:	8b a9       	ldd	r24, Y+51	; 0x33
    2fd0:	9c a9       	ldd	r25, Y+52	; 0x34
    2fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	98 ab       	std	Y+48, r25	; 0x30
    2fdc:	8f a7       	std	Y+47, r24	; 0x2f
    2fde:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fe0:	98 a9       	ldd	r25, Y+48	; 0x30
    2fe2:	9c a7       	std	Y+44, r25	; 0x2c
    2fe4:	8b a7       	std	Y+43, r24	; 0x2b
    2fe6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fe8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fea:	01 97       	sbiw	r24, 0x01	; 1
    2fec:	f1 f7       	brne	.-4      	; 0x2fea <LCD_displayCharacter+0x594>
    2fee:	9c a7       	std	Y+44, r25	; 0x2c
    2ff0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2ff2:	80 e0       	ldi	r24, 0x00	; 0
    2ff4:	62 e0       	ldi	r22, 0x02	; 2
    2ff6:	41 e0       	ldi	r20, 0x01	; 1
    2ff8:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
    2ffc:	80 e0       	ldi	r24, 0x00	; 0
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	a0 e8       	ldi	r26, 0x80	; 128
    3002:	bf e3       	ldi	r27, 0x3F	; 63
    3004:	8f a3       	std	Y+39, r24	; 0x27
    3006:	98 a7       	std	Y+40, r25	; 0x28
    3008:	a9 a7       	std	Y+41, r26	; 0x29
    300a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    300c:	6f a1       	ldd	r22, Y+39	; 0x27
    300e:	78 a5       	ldd	r23, Y+40	; 0x28
    3010:	89 a5       	ldd	r24, Y+41	; 0x29
    3012:	9a a5       	ldd	r25, Y+42	; 0x2a
    3014:	20 e0       	ldi	r18, 0x00	; 0
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	4a e7       	ldi	r20, 0x7A	; 122
    301a:	55 e4       	ldi	r21, 0x45	; 69
    301c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3020:	dc 01       	movw	r26, r24
    3022:	cb 01       	movw	r24, r22
    3024:	8b a3       	std	Y+35, r24	; 0x23
    3026:	9c a3       	std	Y+36, r25	; 0x24
    3028:	ad a3       	std	Y+37, r26	; 0x25
    302a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    302c:	6b a1       	ldd	r22, Y+35	; 0x23
    302e:	7c a1       	ldd	r23, Y+36	; 0x24
    3030:	8d a1       	ldd	r24, Y+37	; 0x25
    3032:	9e a1       	ldd	r25, Y+38	; 0x26
    3034:	20 e0       	ldi	r18, 0x00	; 0
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	40 e8       	ldi	r20, 0x80	; 128
    303a:	5f e3       	ldi	r21, 0x3F	; 63
    303c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3040:	88 23       	and	r24, r24
    3042:	2c f4       	brge	.+10     	; 0x304e <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	9a a3       	std	Y+34, r25	; 0x22
    304a:	89 a3       	std	Y+33, r24	; 0x21
    304c:	3f c0       	rjmp	.+126    	; 0x30cc <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    304e:	6b a1       	ldd	r22, Y+35	; 0x23
    3050:	7c a1       	ldd	r23, Y+36	; 0x24
    3052:	8d a1       	ldd	r24, Y+37	; 0x25
    3054:	9e a1       	ldd	r25, Y+38	; 0x26
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	3f ef       	ldi	r19, 0xFF	; 255
    305a:	4f e7       	ldi	r20, 0x7F	; 127
    305c:	57 e4       	ldi	r21, 0x47	; 71
    305e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3062:	18 16       	cp	r1, r24
    3064:	4c f5       	brge	.+82     	; 0x30b8 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3066:	6f a1       	ldd	r22, Y+39	; 0x27
    3068:	78 a5       	ldd	r23, Y+40	; 0x28
    306a:	89 a5       	ldd	r24, Y+41	; 0x29
    306c:	9a a5       	ldd	r25, Y+42	; 0x2a
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	40 e2       	ldi	r20, 0x20	; 32
    3074:	51 e4       	ldi	r21, 0x41	; 65
    3076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307a:	dc 01       	movw	r26, r24
    307c:	cb 01       	movw	r24, r22
    307e:	bc 01       	movw	r22, r24
    3080:	cd 01       	movw	r24, r26
    3082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3086:	dc 01       	movw	r26, r24
    3088:	cb 01       	movw	r24, r22
    308a:	9a a3       	std	Y+34, r25	; 0x22
    308c:	89 a3       	std	Y+33, r24	; 0x21
    308e:	0f c0       	rjmp	.+30     	; 0x30ae <LCD_displayCharacter+0x658>
    3090:	80 e9       	ldi	r24, 0x90	; 144
    3092:	91 e0       	ldi	r25, 0x01	; 1
    3094:	98 a3       	std	Y+32, r25	; 0x20
    3096:	8f 8f       	std	Y+31, r24	; 0x1f
    3098:	8f 8d       	ldd	r24, Y+31	; 0x1f
    309a:	98 a1       	ldd	r25, Y+32	; 0x20
    309c:	01 97       	sbiw	r24, 0x01	; 1
    309e:	f1 f7       	brne	.-4      	; 0x309c <LCD_displayCharacter+0x646>
    30a0:	98 a3       	std	Y+32, r25	; 0x20
    30a2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30a4:	89 a1       	ldd	r24, Y+33	; 0x21
    30a6:	9a a1       	ldd	r25, Y+34	; 0x22
    30a8:	01 97       	sbiw	r24, 0x01	; 1
    30aa:	9a a3       	std	Y+34, r25	; 0x22
    30ac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ae:	89 a1       	ldd	r24, Y+33	; 0x21
    30b0:	9a a1       	ldd	r25, Y+34	; 0x22
    30b2:	00 97       	sbiw	r24, 0x00	; 0
    30b4:	69 f7       	brne	.-38     	; 0x3090 <LCD_displayCharacter+0x63a>
    30b6:	14 c0       	rjmp	.+40     	; 0x30e0 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30b8:	6b a1       	ldd	r22, Y+35	; 0x23
    30ba:	7c a1       	ldd	r23, Y+36	; 0x24
    30bc:	8d a1       	ldd	r24, Y+37	; 0x25
    30be:	9e a1       	ldd	r25, Y+38	; 0x26
    30c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c4:	dc 01       	movw	r26, r24
    30c6:	cb 01       	movw	r24, r22
    30c8:	9a a3       	std	Y+34, r25	; 0x22
    30ca:	89 a3       	std	Y+33, r24	; 0x21
    30cc:	89 a1       	ldd	r24, Y+33	; 0x21
    30ce:	9a a1       	ldd	r25, Y+34	; 0x22
    30d0:	9e 8f       	std	Y+30, r25	; 0x1e
    30d2:	8d 8f       	std	Y+29, r24	; 0x1d
    30d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	f1 f7       	brne	.-4      	; 0x30d8 <LCD_displayCharacter+0x682>
    30dc:	9e 8f       	std	Y+30, r25	; 0x1e
    30de:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    30e0:	fe 01       	movw	r30, r28
    30e2:	ed 59       	subi	r30, 0x9D	; 157
    30e4:	ff 4f       	sbci	r31, 0xFF	; 255
    30e6:	80 81       	ld	r24, Z
    30e8:	98 2f       	mov	r25, r24
    30ea:	91 70       	andi	r25, 0x01	; 1
    30ec:	80 e0       	ldi	r24, 0x00	; 0
    30ee:	63 e0       	ldi	r22, 0x03	; 3
    30f0:	49 2f       	mov	r20, r25
    30f2:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    30f6:	fe 01       	movw	r30, r28
    30f8:	ed 59       	subi	r30, 0x9D	; 157
    30fa:	ff 4f       	sbci	r31, 0xFF	; 255
    30fc:	80 81       	ld	r24, Z
    30fe:	88 2f       	mov	r24, r24
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	82 70       	andi	r24, 0x02	; 2
    3104:	90 70       	andi	r25, 0x00	; 0
    3106:	95 95       	asr	r25
    3108:	87 95       	ror	r24
    310a:	98 2f       	mov	r25, r24
    310c:	80 e0       	ldi	r24, 0x00	; 0
    310e:	64 e0       	ldi	r22, 0x04	; 4
    3110:	49 2f       	mov	r20, r25
    3112:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    3116:	fe 01       	movw	r30, r28
    3118:	ed 59       	subi	r30, 0x9D	; 157
    311a:	ff 4f       	sbci	r31, 0xFF	; 255
    311c:	80 81       	ld	r24, Z
    311e:	88 2f       	mov	r24, r24
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	84 70       	andi	r24, 0x04	; 4
    3124:	90 70       	andi	r25, 0x00	; 0
    3126:	95 95       	asr	r25
    3128:	87 95       	ror	r24
    312a:	95 95       	asr	r25
    312c:	87 95       	ror	r24
    312e:	98 2f       	mov	r25, r24
    3130:	80 e0       	ldi	r24, 0x00	; 0
    3132:	65 e0       	ldi	r22, 0x05	; 5
    3134:	49 2f       	mov	r20, r25
    3136:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    313a:	fe 01       	movw	r30, r28
    313c:	ed 59       	subi	r30, 0x9D	; 157
    313e:	ff 4f       	sbci	r31, 0xFF	; 255
    3140:	80 81       	ld	r24, Z
    3142:	88 2f       	mov	r24, r24
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	88 70       	andi	r24, 0x08	; 8
    3148:	90 70       	andi	r25, 0x00	; 0
    314a:	95 95       	asr	r25
    314c:	87 95       	ror	r24
    314e:	95 95       	asr	r25
    3150:	87 95       	ror	r24
    3152:	95 95       	asr	r25
    3154:	87 95       	ror	r24
    3156:	98 2f       	mov	r25, r24
    3158:	80 e0       	ldi	r24, 0x00	; 0
    315a:	66 e0       	ldi	r22, 0x06	; 6
    315c:	49 2f       	mov	r20, r25
    315e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
    3162:	80 e0       	ldi	r24, 0x00	; 0
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	a0 e8       	ldi	r26, 0x80	; 128
    3168:	bf e3       	ldi	r27, 0x3F	; 63
    316a:	89 8f       	std	Y+25, r24	; 0x19
    316c:	9a 8f       	std	Y+26, r25	; 0x1a
    316e:	ab 8f       	std	Y+27, r26	; 0x1b
    3170:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3172:	69 8d       	ldd	r22, Y+25	; 0x19
    3174:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3176:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3178:	9c 8d       	ldd	r25, Y+28	; 0x1c
    317a:	20 e0       	ldi	r18, 0x00	; 0
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	4a e7       	ldi	r20, 0x7A	; 122
    3180:	55 e4       	ldi	r21, 0x45	; 69
    3182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3186:	dc 01       	movw	r26, r24
    3188:	cb 01       	movw	r24, r22
    318a:	8d 8b       	std	Y+21, r24	; 0x15
    318c:	9e 8b       	std	Y+22, r25	; 0x16
    318e:	af 8b       	std	Y+23, r26	; 0x17
    3190:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3192:	6d 89       	ldd	r22, Y+21	; 0x15
    3194:	7e 89       	ldd	r23, Y+22	; 0x16
    3196:	8f 89       	ldd	r24, Y+23	; 0x17
    3198:	98 8d       	ldd	r25, Y+24	; 0x18
    319a:	20 e0       	ldi	r18, 0x00	; 0
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	40 e8       	ldi	r20, 0x80	; 128
    31a0:	5f e3       	ldi	r21, 0x3F	; 63
    31a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31a6:	88 23       	and	r24, r24
    31a8:	2c f4       	brge	.+10     	; 0x31b4 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	9c 8b       	std	Y+20, r25	; 0x14
    31b0:	8b 8b       	std	Y+19, r24	; 0x13
    31b2:	3f c0       	rjmp	.+126    	; 0x3232 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    31b4:	6d 89       	ldd	r22, Y+21	; 0x15
    31b6:	7e 89       	ldd	r23, Y+22	; 0x16
    31b8:	8f 89       	ldd	r24, Y+23	; 0x17
    31ba:	98 8d       	ldd	r25, Y+24	; 0x18
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	3f ef       	ldi	r19, 0xFF	; 255
    31c0:	4f e7       	ldi	r20, 0x7F	; 127
    31c2:	57 e4       	ldi	r21, 0x47	; 71
    31c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31c8:	18 16       	cp	r1, r24
    31ca:	4c f5       	brge	.+82     	; 0x321e <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31cc:	69 8d       	ldd	r22, Y+25	; 0x19
    31ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	40 e2       	ldi	r20, 0x20	; 32
    31da:	51 e4       	ldi	r21, 0x41	; 65
    31dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	bc 01       	movw	r22, r24
    31e6:	cd 01       	movw	r24, r26
    31e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	9c 8b       	std	Y+20, r25	; 0x14
    31f2:	8b 8b       	std	Y+19, r24	; 0x13
    31f4:	0f c0       	rjmp	.+30     	; 0x3214 <LCD_displayCharacter+0x7be>
    31f6:	80 e9       	ldi	r24, 0x90	; 144
    31f8:	91 e0       	ldi	r25, 0x01	; 1
    31fa:	9a 8b       	std	Y+18, r25	; 0x12
    31fc:	89 8b       	std	Y+17, r24	; 0x11
    31fe:	89 89       	ldd	r24, Y+17	; 0x11
    3200:	9a 89       	ldd	r25, Y+18	; 0x12
    3202:	01 97       	sbiw	r24, 0x01	; 1
    3204:	f1 f7       	brne	.-4      	; 0x3202 <LCD_displayCharacter+0x7ac>
    3206:	9a 8b       	std	Y+18, r25	; 0x12
    3208:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    320a:	8b 89       	ldd	r24, Y+19	; 0x13
    320c:	9c 89       	ldd	r25, Y+20	; 0x14
    320e:	01 97       	sbiw	r24, 0x01	; 1
    3210:	9c 8b       	std	Y+20, r25	; 0x14
    3212:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3214:	8b 89       	ldd	r24, Y+19	; 0x13
    3216:	9c 89       	ldd	r25, Y+20	; 0x14
    3218:	00 97       	sbiw	r24, 0x00	; 0
    321a:	69 f7       	brne	.-38     	; 0x31f6 <LCD_displayCharacter+0x7a0>
    321c:	14 c0       	rjmp	.+40     	; 0x3246 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    321e:	6d 89       	ldd	r22, Y+21	; 0x15
    3220:	7e 89       	ldd	r23, Y+22	; 0x16
    3222:	8f 89       	ldd	r24, Y+23	; 0x17
    3224:	98 8d       	ldd	r25, Y+24	; 0x18
    3226:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    322a:	dc 01       	movw	r26, r24
    322c:	cb 01       	movw	r24, r22
    322e:	9c 8b       	std	Y+20, r25	; 0x14
    3230:	8b 8b       	std	Y+19, r24	; 0x13
    3232:	8b 89       	ldd	r24, Y+19	; 0x13
    3234:	9c 89       	ldd	r25, Y+20	; 0x14
    3236:	98 8b       	std	Y+16, r25	; 0x10
    3238:	8f 87       	std	Y+15, r24	; 0x0f
    323a:	8f 85       	ldd	r24, Y+15	; 0x0f
    323c:	98 89       	ldd	r25, Y+16	; 0x10
    323e:	01 97       	sbiw	r24, 0x01	; 1
    3240:	f1 f7       	brne	.-4      	; 0x323e <LCD_displayCharacter+0x7e8>
    3242:	98 8b       	std	Y+16, r25	; 0x10
    3244:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3246:	80 e0       	ldi	r24, 0x00	; 0
    3248:	62 e0       	ldi	r22, 0x02	; 2
    324a:	40 e0       	ldi	r20, 0x00	; 0
    324c:	0e 94 c8 0c 	call	0x1990	; 0x1990 <GPIO_writePin>
    3250:	80 e0       	ldi	r24, 0x00	; 0
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	a0 e8       	ldi	r26, 0x80	; 128
    3256:	bf e3       	ldi	r27, 0x3F	; 63
    3258:	8b 87       	std	Y+11, r24	; 0x0b
    325a:	9c 87       	std	Y+12, r25	; 0x0c
    325c:	ad 87       	std	Y+13, r26	; 0x0d
    325e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3260:	6b 85       	ldd	r22, Y+11	; 0x0b
    3262:	7c 85       	ldd	r23, Y+12	; 0x0c
    3264:	8d 85       	ldd	r24, Y+13	; 0x0d
    3266:	9e 85       	ldd	r25, Y+14	; 0x0e
    3268:	20 e0       	ldi	r18, 0x00	; 0
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	4a e7       	ldi	r20, 0x7A	; 122
    326e:	55 e4       	ldi	r21, 0x45	; 69
    3270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	8f 83       	std	Y+7, r24	; 0x07
    327a:	98 87       	std	Y+8, r25	; 0x08
    327c:	a9 87       	std	Y+9, r26	; 0x09
    327e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3280:	6f 81       	ldd	r22, Y+7	; 0x07
    3282:	78 85       	ldd	r23, Y+8	; 0x08
    3284:	89 85       	ldd	r24, Y+9	; 0x09
    3286:	9a 85       	ldd	r25, Y+10	; 0x0a
    3288:	20 e0       	ldi	r18, 0x00	; 0
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	40 e8       	ldi	r20, 0x80	; 128
    328e:	5f e3       	ldi	r21, 0x3F	; 63
    3290:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3294:	88 23       	and	r24, r24
    3296:	2c f4       	brge	.+10     	; 0x32a2 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    3298:	81 e0       	ldi	r24, 0x01	; 1
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	9e 83       	std	Y+6, r25	; 0x06
    329e:	8d 83       	std	Y+5, r24	; 0x05
    32a0:	3f c0       	rjmp	.+126    	; 0x3320 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    32a2:	6f 81       	ldd	r22, Y+7	; 0x07
    32a4:	78 85       	ldd	r23, Y+8	; 0x08
    32a6:	89 85       	ldd	r24, Y+9	; 0x09
    32a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	3f ef       	ldi	r19, 0xFF	; 255
    32ae:	4f e7       	ldi	r20, 0x7F	; 127
    32b0:	57 e4       	ldi	r21, 0x47	; 71
    32b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32b6:	18 16       	cp	r1, r24
    32b8:	4c f5       	brge	.+82     	; 0x330c <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    32bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    32be:	8d 85       	ldd	r24, Y+13	; 0x0d
    32c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    32c2:	20 e0       	ldi	r18, 0x00	; 0
    32c4:	30 e0       	ldi	r19, 0x00	; 0
    32c6:	40 e2       	ldi	r20, 0x20	; 32
    32c8:	51 e4       	ldi	r21, 0x41	; 65
    32ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ce:	dc 01       	movw	r26, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	bc 01       	movw	r22, r24
    32d4:	cd 01       	movw	r24, r26
    32d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	9e 83       	std	Y+6, r25	; 0x06
    32e0:	8d 83       	std	Y+5, r24	; 0x05
    32e2:	0f c0       	rjmp	.+30     	; 0x3302 <LCD_displayCharacter+0x8ac>
    32e4:	80 e9       	ldi	r24, 0x90	; 144
    32e6:	91 e0       	ldi	r25, 0x01	; 1
    32e8:	9c 83       	std	Y+4, r25	; 0x04
    32ea:	8b 83       	std	Y+3, r24	; 0x03
    32ec:	8b 81       	ldd	r24, Y+3	; 0x03
    32ee:	9c 81       	ldd	r25, Y+4	; 0x04
    32f0:	01 97       	sbiw	r24, 0x01	; 1
    32f2:	f1 f7       	brne	.-4      	; 0x32f0 <LCD_displayCharacter+0x89a>
    32f4:	9c 83       	std	Y+4, r25	; 0x04
    32f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32f8:	8d 81       	ldd	r24, Y+5	; 0x05
    32fa:	9e 81       	ldd	r25, Y+6	; 0x06
    32fc:	01 97       	sbiw	r24, 0x01	; 1
    32fe:	9e 83       	std	Y+6, r25	; 0x06
    3300:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3302:	8d 81       	ldd	r24, Y+5	; 0x05
    3304:	9e 81       	ldd	r25, Y+6	; 0x06
    3306:	00 97       	sbiw	r24, 0x00	; 0
    3308:	69 f7       	brne	.-38     	; 0x32e4 <LCD_displayCharacter+0x88e>
    330a:	14 c0       	rjmp	.+40     	; 0x3334 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    330c:	6f 81       	ldd	r22, Y+7	; 0x07
    330e:	78 85       	ldd	r23, Y+8	; 0x08
    3310:	89 85       	ldd	r24, Y+9	; 0x09
    3312:	9a 85       	ldd	r25, Y+10	; 0x0a
    3314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3318:	dc 01       	movw	r26, r24
    331a:	cb 01       	movw	r24, r22
    331c:	9e 83       	std	Y+6, r25	; 0x06
    331e:	8d 83       	std	Y+5, r24	; 0x05
    3320:	8d 81       	ldd	r24, Y+5	; 0x05
    3322:	9e 81       	ldd	r25, Y+6	; 0x06
    3324:	9a 83       	std	Y+2, r25	; 0x02
    3326:	89 83       	std	Y+1, r24	; 0x01
    3328:	89 81       	ldd	r24, Y+1	; 0x01
    332a:	9a 81       	ldd	r25, Y+2	; 0x02
    332c:	01 97       	sbiw	r24, 0x01	; 1
    332e:	f1 f7       	brne	.-4      	; 0x332c <LCD_displayCharacter+0x8d6>
    3330:	9a 83       	std	Y+2, r25	; 0x02
    3332:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3334:	cd 59       	subi	r28, 0x9D	; 157
    3336:	df 4f       	sbci	r29, 0xFF	; 255
    3338:	0f b6       	in	r0, 0x3f	; 63
    333a:	f8 94       	cli
    333c:	de bf       	out	0x3e, r29	; 62
    333e:	0f be       	out	0x3f, r0	; 63
    3340:	cd bf       	out	0x3d, r28	; 61
    3342:	cf 91       	pop	r28
    3344:	df 91       	pop	r29
    3346:	1f 91       	pop	r17
    3348:	0f 91       	pop	r16
    334a:	08 95       	ret

0000334c <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    334c:	df 93       	push	r29
    334e:	cf 93       	push	r28
    3350:	00 d0       	rcall	.+0      	; 0x3352 <LCD_displayString+0x6>
    3352:	0f 92       	push	r0
    3354:	cd b7       	in	r28, 0x3d	; 61
    3356:	de b7       	in	r29, 0x3e	; 62
    3358:	9b 83       	std	Y+3, r25	; 0x03
    335a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    335c:	19 82       	std	Y+1, r1	; 0x01
    335e:	0e c0       	rjmp	.+28     	; 0x337c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3360:	89 81       	ldd	r24, Y+1	; 0x01
    3362:	28 2f       	mov	r18, r24
    3364:	30 e0       	ldi	r19, 0x00	; 0
    3366:	8a 81       	ldd	r24, Y+2	; 0x02
    3368:	9b 81       	ldd	r25, Y+3	; 0x03
    336a:	fc 01       	movw	r30, r24
    336c:	e2 0f       	add	r30, r18
    336e:	f3 1f       	adc	r31, r19
    3370:	80 81       	ld	r24, Z
    3372:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <LCD_displayCharacter>
		i++;
    3376:	89 81       	ldd	r24, Y+1	; 0x01
    3378:	8f 5f       	subi	r24, 0xFF	; 255
    337a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    337c:	89 81       	ldd	r24, Y+1	; 0x01
    337e:	28 2f       	mov	r18, r24
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	8a 81       	ldd	r24, Y+2	; 0x02
    3384:	9b 81       	ldd	r25, Y+3	; 0x03
    3386:	fc 01       	movw	r30, r24
    3388:	e2 0f       	add	r30, r18
    338a:	f3 1f       	adc	r31, r19
    338c:	80 81       	ld	r24, Z
    338e:	88 23       	and	r24, r24
    3390:	39 f7       	brne	.-50     	; 0x3360 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3392:	0f 90       	pop	r0
    3394:	0f 90       	pop	r0
    3396:	0f 90       	pop	r0
    3398:	cf 91       	pop	r28
    339a:	df 91       	pop	r29
    339c:	08 95       	ret

0000339e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    339e:	df 93       	push	r29
    33a0:	cf 93       	push	r28
    33a2:	00 d0       	rcall	.+0      	; 0x33a4 <LCD_moveCursor+0x6>
    33a4:	00 d0       	rcall	.+0      	; 0x33a6 <LCD_moveCursor+0x8>
    33a6:	0f 92       	push	r0
    33a8:	cd b7       	in	r28, 0x3d	; 61
    33aa:	de b7       	in	r29, 0x3e	; 62
    33ac:	8a 83       	std	Y+2, r24	; 0x02
    33ae:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    33b0:	8a 81       	ldd	r24, Y+2	; 0x02
    33b2:	28 2f       	mov	r18, r24
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	3d 83       	std	Y+5, r19	; 0x05
    33b8:	2c 83       	std	Y+4, r18	; 0x04
    33ba:	8c 81       	ldd	r24, Y+4	; 0x04
    33bc:	9d 81       	ldd	r25, Y+5	; 0x05
    33be:	81 30       	cpi	r24, 0x01	; 1
    33c0:	91 05       	cpc	r25, r1
    33c2:	c1 f0       	breq	.+48     	; 0x33f4 <LCD_moveCursor+0x56>
    33c4:	2c 81       	ldd	r18, Y+4	; 0x04
    33c6:	3d 81       	ldd	r19, Y+5	; 0x05
    33c8:	22 30       	cpi	r18, 0x02	; 2
    33ca:	31 05       	cpc	r19, r1
    33cc:	2c f4       	brge	.+10     	; 0x33d8 <LCD_moveCursor+0x3a>
    33ce:	8c 81       	ldd	r24, Y+4	; 0x04
    33d0:	9d 81       	ldd	r25, Y+5	; 0x05
    33d2:	00 97       	sbiw	r24, 0x00	; 0
    33d4:	61 f0       	breq	.+24     	; 0x33ee <LCD_moveCursor+0x50>
    33d6:	19 c0       	rjmp	.+50     	; 0x340a <LCD_moveCursor+0x6c>
    33d8:	2c 81       	ldd	r18, Y+4	; 0x04
    33da:	3d 81       	ldd	r19, Y+5	; 0x05
    33dc:	22 30       	cpi	r18, 0x02	; 2
    33de:	31 05       	cpc	r19, r1
    33e0:	69 f0       	breq	.+26     	; 0x33fc <LCD_moveCursor+0x5e>
    33e2:	8c 81       	ldd	r24, Y+4	; 0x04
    33e4:	9d 81       	ldd	r25, Y+5	; 0x05
    33e6:	83 30       	cpi	r24, 0x03	; 3
    33e8:	91 05       	cpc	r25, r1
    33ea:	61 f0       	breq	.+24     	; 0x3404 <LCD_moveCursor+0x66>
    33ec:	0e c0       	rjmp	.+28     	; 0x340a <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    33ee:	8b 81       	ldd	r24, Y+3	; 0x03
    33f0:	89 83       	std	Y+1, r24	; 0x01
    33f2:	0b c0       	rjmp	.+22     	; 0x340a <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    33f4:	8b 81       	ldd	r24, Y+3	; 0x03
    33f6:	80 5c       	subi	r24, 0xC0	; 192
    33f8:	89 83       	std	Y+1, r24	; 0x01
    33fa:	07 c0       	rjmp	.+14     	; 0x340a <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    33fc:	8b 81       	ldd	r24, Y+3	; 0x03
    33fe:	80 5f       	subi	r24, 0xF0	; 240
    3400:	89 83       	std	Y+1, r24	; 0x01
    3402:	03 c0       	rjmp	.+6      	; 0x340a <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3404:	8b 81       	ldd	r24, Y+3	; 0x03
    3406:	80 5b       	subi	r24, 0xB0	; 176
    3408:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    340a:	89 81       	ldd	r24, Y+1	; 0x01
    340c:	80 68       	ori	r24, 0x80	; 128
    340e:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_sendCommand>
}
    3412:	0f 90       	pop	r0
    3414:	0f 90       	pop	r0
    3416:	0f 90       	pop	r0
    3418:	0f 90       	pop	r0
    341a:	0f 90       	pop	r0
    341c:	cf 91       	pop	r28
    341e:	df 91       	pop	r29
    3420:	08 95       	ret

00003422 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3422:	df 93       	push	r29
    3424:	cf 93       	push	r28
    3426:	00 d0       	rcall	.+0      	; 0x3428 <LCD_displayStringRowColumn+0x6>
    3428:	00 d0       	rcall	.+0      	; 0x342a <LCD_displayStringRowColumn+0x8>
    342a:	cd b7       	in	r28, 0x3d	; 61
    342c:	de b7       	in	r29, 0x3e	; 62
    342e:	89 83       	std	Y+1, r24	; 0x01
    3430:	6a 83       	std	Y+2, r22	; 0x02
    3432:	5c 83       	std	Y+4, r21	; 0x04
    3434:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3436:	89 81       	ldd	r24, Y+1	; 0x01
    3438:	6a 81       	ldd	r22, Y+2	; 0x02
    343a:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    343e:	8b 81       	ldd	r24, Y+3	; 0x03
    3440:	9c 81       	ldd	r25, Y+4	; 0x04
    3442:	0e 94 a6 19 	call	0x334c	; 0x334c <LCD_displayString>
}
    3446:	0f 90       	pop	r0
    3448:	0f 90       	pop	r0
    344a:	0f 90       	pop	r0
    344c:	0f 90       	pop	r0
    344e:	cf 91       	pop	r28
    3450:	df 91       	pop	r29
    3452:	08 95       	ret

00003454 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3454:	df 93       	push	r29
    3456:	cf 93       	push	r28
    3458:	cd b7       	in	r28, 0x3d	; 61
    345a:	de b7       	in	r29, 0x3e	; 62
    345c:	62 97       	sbiw	r28, 0x12	; 18
    345e:	0f b6       	in	r0, 0x3f	; 63
    3460:	f8 94       	cli
    3462:	de bf       	out	0x3e, r29	; 62
    3464:	0f be       	out	0x3f, r0	; 63
    3466:	cd bf       	out	0x3d, r28	; 61
    3468:	9a 8b       	std	Y+18, r25	; 0x12
    346a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    346c:	89 89       	ldd	r24, Y+17	; 0x11
    346e:	9a 89       	ldd	r25, Y+18	; 0x12
    3470:	9e 01       	movw	r18, r28
    3472:	2f 5f       	subi	r18, 0xFF	; 255
    3474:	3f 4f       	sbci	r19, 0xFF	; 255
    3476:	b9 01       	movw	r22, r18
    3478:	4a e0       	ldi	r20, 0x0A	; 10
    347a:	50 e0       	ldi	r21, 0x00	; 0
    347c:	0e 94 8e 1a 	call	0x351c	; 0x351c <itoa>
   LCD_displayString(buff); /* Display the string */
    3480:	ce 01       	movw	r24, r28
    3482:	01 96       	adiw	r24, 0x01	; 1
    3484:	0e 94 a6 19 	call	0x334c	; 0x334c <LCD_displayString>
}
    3488:	62 96       	adiw	r28, 0x12	; 18
    348a:	0f b6       	in	r0, 0x3f	; 63
    348c:	f8 94       	cli
    348e:	de bf       	out	0x3e, r29	; 62
    3490:	0f be       	out	0x3f, r0	; 63
    3492:	cd bf       	out	0x3d, r28	; 61
    3494:	cf 91       	pop	r28
    3496:	df 91       	pop	r29
    3498:	08 95       	ret

0000349a <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    349a:	df 93       	push	r29
    349c:	cf 93       	push	r28
    349e:	cd b7       	in	r28, 0x3d	; 61
    34a0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    34a2:	81 e0       	ldi	r24, 0x01	; 1
    34a4:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_sendCommand>
}
    34a8:	cf 91       	pop	r28
    34aa:	df 91       	pop	r29
    34ac:	08 95       	ret

000034ae <__prologue_saves__>:
    34ae:	2f 92       	push	r2
    34b0:	3f 92       	push	r3
    34b2:	4f 92       	push	r4
    34b4:	5f 92       	push	r5
    34b6:	6f 92       	push	r6
    34b8:	7f 92       	push	r7
    34ba:	8f 92       	push	r8
    34bc:	9f 92       	push	r9
    34be:	af 92       	push	r10
    34c0:	bf 92       	push	r11
    34c2:	cf 92       	push	r12
    34c4:	df 92       	push	r13
    34c6:	ef 92       	push	r14
    34c8:	ff 92       	push	r15
    34ca:	0f 93       	push	r16
    34cc:	1f 93       	push	r17
    34ce:	cf 93       	push	r28
    34d0:	df 93       	push	r29
    34d2:	cd b7       	in	r28, 0x3d	; 61
    34d4:	de b7       	in	r29, 0x3e	; 62
    34d6:	ca 1b       	sub	r28, r26
    34d8:	db 0b       	sbc	r29, r27
    34da:	0f b6       	in	r0, 0x3f	; 63
    34dc:	f8 94       	cli
    34de:	de bf       	out	0x3e, r29	; 62
    34e0:	0f be       	out	0x3f, r0	; 63
    34e2:	cd bf       	out	0x3d, r28	; 61
    34e4:	09 94       	ijmp

000034e6 <__epilogue_restores__>:
    34e6:	2a 88       	ldd	r2, Y+18	; 0x12
    34e8:	39 88       	ldd	r3, Y+17	; 0x11
    34ea:	48 88       	ldd	r4, Y+16	; 0x10
    34ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    34ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    34f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    34f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    34f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    34f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    34f8:	b9 84       	ldd	r11, Y+9	; 0x09
    34fa:	c8 84       	ldd	r12, Y+8	; 0x08
    34fc:	df 80       	ldd	r13, Y+7	; 0x07
    34fe:	ee 80       	ldd	r14, Y+6	; 0x06
    3500:	fd 80       	ldd	r15, Y+5	; 0x05
    3502:	0c 81       	ldd	r16, Y+4	; 0x04
    3504:	1b 81       	ldd	r17, Y+3	; 0x03
    3506:	aa 81       	ldd	r26, Y+2	; 0x02
    3508:	b9 81       	ldd	r27, Y+1	; 0x01
    350a:	ce 0f       	add	r28, r30
    350c:	d1 1d       	adc	r29, r1
    350e:	0f b6       	in	r0, 0x3f	; 63
    3510:	f8 94       	cli
    3512:	de bf       	out	0x3e, r29	; 62
    3514:	0f be       	out	0x3f, r0	; 63
    3516:	cd bf       	out	0x3d, r28	; 61
    3518:	ed 01       	movw	r28, r26
    351a:	08 95       	ret

0000351c <itoa>:
    351c:	fb 01       	movw	r30, r22
    351e:	9f 01       	movw	r18, r30
    3520:	e8 94       	clt
    3522:	42 30       	cpi	r20, 0x02	; 2
    3524:	c4 f0       	brlt	.+48     	; 0x3556 <itoa+0x3a>
    3526:	45 32       	cpi	r20, 0x25	; 37
    3528:	b4 f4       	brge	.+44     	; 0x3556 <itoa+0x3a>
    352a:	4a 30       	cpi	r20, 0x0A	; 10
    352c:	29 f4       	brne	.+10     	; 0x3538 <itoa+0x1c>
    352e:	97 fb       	bst	r25, 7
    3530:	1e f4       	brtc	.+6      	; 0x3538 <itoa+0x1c>
    3532:	90 95       	com	r25
    3534:	81 95       	neg	r24
    3536:	9f 4f       	sbci	r25, 0xFF	; 255
    3538:	64 2f       	mov	r22, r20
    353a:	77 27       	eor	r23, r23
    353c:	0e 94 bf 1a 	call	0x357e	; 0x357e <__udivmodhi4>
    3540:	80 5d       	subi	r24, 0xD0	; 208
    3542:	8a 33       	cpi	r24, 0x3A	; 58
    3544:	0c f0       	brlt	.+2      	; 0x3548 <itoa+0x2c>
    3546:	89 5d       	subi	r24, 0xD9	; 217
    3548:	81 93       	st	Z+, r24
    354a:	cb 01       	movw	r24, r22
    354c:	00 97       	sbiw	r24, 0x00	; 0
    354e:	a1 f7       	brne	.-24     	; 0x3538 <itoa+0x1c>
    3550:	16 f4       	brtc	.+4      	; 0x3556 <itoa+0x3a>
    3552:	5d e2       	ldi	r21, 0x2D	; 45
    3554:	51 93       	st	Z+, r21
    3556:	10 82       	st	Z, r1
    3558:	c9 01       	movw	r24, r18
    355a:	0c 94 af 1a 	jmp	0x355e	; 0x355e <strrev>

0000355e <strrev>:
    355e:	dc 01       	movw	r26, r24
    3560:	fc 01       	movw	r30, r24
    3562:	67 2f       	mov	r22, r23
    3564:	71 91       	ld	r23, Z+
    3566:	77 23       	and	r23, r23
    3568:	e1 f7       	brne	.-8      	; 0x3562 <strrev+0x4>
    356a:	32 97       	sbiw	r30, 0x02	; 2
    356c:	04 c0       	rjmp	.+8      	; 0x3576 <strrev+0x18>
    356e:	7c 91       	ld	r23, X
    3570:	6d 93       	st	X+, r22
    3572:	70 83       	st	Z, r23
    3574:	62 91       	ld	r22, -Z
    3576:	ae 17       	cp	r26, r30
    3578:	bf 07       	cpc	r27, r31
    357a:	c8 f3       	brcs	.-14     	; 0x356e <strrev+0x10>
    357c:	08 95       	ret

0000357e <__udivmodhi4>:
    357e:	aa 1b       	sub	r26, r26
    3580:	bb 1b       	sub	r27, r27
    3582:	51 e1       	ldi	r21, 0x11	; 17
    3584:	07 c0       	rjmp	.+14     	; 0x3594 <__udivmodhi4_ep>

00003586 <__udivmodhi4_loop>:
    3586:	aa 1f       	adc	r26, r26
    3588:	bb 1f       	adc	r27, r27
    358a:	a6 17       	cp	r26, r22
    358c:	b7 07       	cpc	r27, r23
    358e:	10 f0       	brcs	.+4      	; 0x3594 <__udivmodhi4_ep>
    3590:	a6 1b       	sub	r26, r22
    3592:	b7 0b       	sbc	r27, r23

00003594 <__udivmodhi4_ep>:
    3594:	88 1f       	adc	r24, r24
    3596:	99 1f       	adc	r25, r25
    3598:	5a 95       	dec	r21
    359a:	a9 f7       	brne	.-22     	; 0x3586 <__udivmodhi4_loop>
    359c:	80 95       	com	r24
    359e:	90 95       	com	r25
    35a0:	bc 01       	movw	r22, r24
    35a2:	cd 01       	movw	r24, r26
    35a4:	08 95       	ret

000035a6 <_exit>:
    35a6:	f8 94       	cli

000035a8 <__stop_program>:
    35a8:	ff cf       	rjmp	.-2      	; 0x35a8 <__stop_program>
